<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/2023/04/07/spring-spi/</url>
    <content><![CDATA[<h1 id="Spring-Boot-SPI-机制探究"><a href="#Spring-Boot-SPI-机制探究" class="headerlink" title="Spring Boot SPI 机制探究"></a>Spring Boot SPI 机制探究</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot 带给我们的一大便利是当需要引入一个第三方依赖时，如果其有 Starter，可以加入 Starter 依赖，就可以实现自动装配，这中便利就来自 Spring Boot 独特的 SPI 机制。</p>
<p>比如项目中希望引入 Mybatis，只需在 POM 中加入以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>剩下的工作就是定义 Mapper 并使用，中间所有繁杂的配置 Starter 都帮忙做了。如此神奇的功能其实实现原理十分简单，下文进行分析。</p>
<h2 id="获取配置类的全限定名"><a href="#获取配置类的全限定名" class="headerlink" title="获取配置类的全限定名"></a>获取配置类的全限定名</h2><p>从 <code>@SpringBootApplication</code> 注解一路向下寻找，依次找<code>@EnableAutoConfiguration</code>、<code>@Import(AutoConfigurationImportSelector.class)</code>、<code>getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)</code>，可以看到熟悉的 <code>spring.factories</code>，此处调用的两个函数即为 Spring SPI 的扫描逻辑，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">		SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span><br><span class="line">ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line">		<span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">				+ <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="META-INF-spring-factories"><a href="#META-INF-spring-factories" class="headerlink" title="META-INF/spring.factories"></a><code>META-INF/spring.factories</code></h3><p>第一种方式是读取 classpath 中的所有 <code>META-INF/spring.factories</code> 文件，此处有三个循环，第一层遍历获取到的文件位置，第二层遍历文件中的属性，第三层遍历每个属性用 <code>,</code> 分割后的字符串（类路径），这样就获取到了所有需要进行装配的 Configuration 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">	<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">	<span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">	<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">	<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> ((String) entry.getKey()).trim();</span><br><span class="line">		String[] factoryImplementationNames =</span><br><span class="line">				StringUtils.commaDelimitedListToStringArray((String) entry.getValue());</span><br><span class="line">		<span class="keyword">for</span> (String factoryImplementationName : factoryImplementationNames) &#123;</span><br><span class="line">			result.computeIfAbsent(factoryTypeName, key -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">					.add(factoryImplementationName.trim());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports"><a href="#META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports" class="headerlink" title="META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports"></a><code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></h3><p>在 Spring Boot 2.7.0 中，增加了对另一种自动配置方式的支持，即读取资源文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件，第一层遍历获取到的文件位置，第二层遍历文件中的行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> String.format(LOCATION, annotation.getName());</span><br><span class="line">Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);</span><br><span class="line">List&lt;String&gt; importCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">	<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">	importCandidates.addAll(readCandidateConfigurations(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>得到类名后，Spring 利用 <code>Class.forName</code> 将所有需要进行装配的配置类进行加载实例化，不再赘述。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习编码的过程中不能被像 SPI 看起来高深的概念所迷惑，看起来很神奇的自动装配功能其实归根到底就是读取特定名称的配置文件，然后反射获取配置类。</p>
]]></content>
  </entry>
  <entry>
    <title>在 Windows 下愉快地使用 SSH</title>
    <url>/2023/04/01/ssh/</url>
    <content><![CDATA[<p>Windows 现在自带OpenSSH客户端，配合git进行使用</p>
<span id="more"></span>

<h2 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h2><p>使用 <code>Ed25519</code> 算法生成 SSH key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>确认生成路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\you/.ssh/id_ed25519):</span><br></pre></td></tr></table></figure>

<p>输入两次 passphrase，可以为空，为空时一旦有人获取私钥，则可以访问所有配置了该私钥的系统，不建议为空。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"></span><br><span class="line">Enter same passphrase again:</span><br><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519</span><br><span class="line"></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>

<p>生成后相应目录会产生两个文件，<code>.pub</code>后缀为公钥，另一个为私钥。</p>
<h2 id="使用-SSH-Key"><a href="#使用-SSH-Key" class="headerlink" title="使用 SSH Key"></a>使用 SSH Key</h2><p>使用方式以<code>GitHub</code>为例，进入<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，将公钥内容粘贴进<code>Key</code>框中，点击<code>Add SSH key</code>，</p>
<p>测试 github 认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;C:\Users\you/.ssh/id_ed25519&#x27;</span>:</span><br><span class="line"></span><br><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-ssh-agent"><a href="#配置-ssh-agent" class="headerlink" title="配置 ssh-agent"></a>配置 ssh-agent</h2><p>在做完以上步骤后， SHH Key 已经可以正常使用了，但是每次都要输入 passphrase，十分麻烦，可以利用 ssh-agent 对私钥解密结果进行缓存。</p>
<p>使用键盘输入 <code>Win</code> + <code>R</code>，输入<code>services.msc</code>进入服务。打开<code>OpenSSH Authentication Agent</code>项目，启动类型选择自动或自动(延迟启动)，点击启动。</p>
<p>添加 SSH key 到 ssh-agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-add</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> C:\Users\lusha/.ssh/id_ed25519:</span><br><span class="line"></span><br><span class="line">Identity added: C:\Users\you/.ssh/id_ed25519 (your_email@example.com)</span><br></pre></td></tr></table></figure>

<p>操作完成后，删除私钥文件。建议将私钥文件加密备份，以防操作系统重装等因素导致私钥丢失</p>
<h2 id="GPG"><a href="#GPG" class="headerlink" title="GPG"></a>GPG</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.29-unknown; Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg&#x27;</span> created</span><br><span class="line">gpg: keybox <span class="string">&#x27;/c/Users/lusha/.gnupg/pubring.kbx&#x27;</span> created</span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 1</span><br><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072) 4096</span><br><span class="line">Requested keysize is 4096 bits</span><br><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0)</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: lsq27</span><br><span class="line">Email address: lushaoqiang27@gmail.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;lsq27 &lt;lushaoqiang27@gmail.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /c/Users/lusha/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key 14F807AABAA53E8E marked as ultimately trusted</span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d&#x27;</span> created</span><br><span class="line">gpg: revocation certificate stored as <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d/99A618713B52EF6F70AE461A14F807AABAA53E8E.rev&#x27;</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2023-03-31 [SC]</span><br><span class="line">      99A618713B52EF6F70AE461A14F807AABAA53E8E</span><br><span class="line">uid                      lsq27 &lt;lushaoqiang27@gmail.com&gt;</span><br><span class="line">sub   rsa4096 2023-03-31 [E]</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>转载请注明出处，使用时须遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA 4.0 License</a> 中所述条款。</p>
</blockquote>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>GPG</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
</search>
