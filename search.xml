<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>create-own-spring-boot-starter</title>
    <url>/2021/create-own-spring-boot-starter/</url>
    <content><![CDATA[<p>Spring Boot </p>
<span id="more"></span>

<p>当 Spring Boot 启动时，它会在类路径中查找名为 spring.factories 的文件。此文件位于 META-INF 目录中。<br>以 mybatis-spring-boot-starter 为例，其<code>META-INF/spring.factories</code>中的内容如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span>=<span class="string">\</span></span><br><span class="line"><span class="string">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\</span></span><br><span class="line"><span class="string">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<p>Spring Boot 2.7 引入了一个用于注册自动配置的新文件<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>，同时保留了原有的<code>spring.factories</code>注册方式。</p>
<p>Spring Boot 3.0 移除了对在<code>spring.factories</code>中使用键<code>org.springframework.boot.autoconfigure.EnableAutoConfiguration</code>注册自动配置的支持，仅支持<code>imports</code>文件注册方式。<code>spring.factories</code>中的其他键不受影响。</p>
<p>所以为确保 starter 的兼容性，<code>spring.factories</code>和<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>均需要进行配置。</p>
<p>其<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>中的内容如下</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</span></span><br><span class="line"><span class="attr">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span></span><br></pre></td></tr></table></figure>

<ul>
<li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.0-Migration-Guide#auto-configuration-files">Spring Boot 3.0 Migration Guide · spring-projects&#x2F;spring-boot Wiki · GitHub</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/issues/29699">Remove spring.factories auto-configuration support · Issue #29699 · spring-projects&#x2F;spring-boot (github.com)</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>clickhouse</title>
    <url>/2023/clickhouse/</url>
    <content><![CDATA[<p>ClickHouse 和 MySQL 都是数据库管理系统，但它们在架构、查询执行和可扩展性方面存在一些关键差异。</p>
<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><p>ClickHouse 使用列式存储引擎，该引擎针对分析查询进行了优化，并允许快速聚合和数据压缩。相比之下，MySQL 使用基于行的存储引擎，该引擎更适合事务性工作负载，并提供更快的插入和更新。</p>
<h3 id="SQL-方言"><a href="#SQL-方言" class="headerlink" title="SQL 方言"></a>SQL 方言</h3><p>ClickHouse 使用自己专有的查询语言，称为 ClickHouse SQL，该语言专为分析处理而设计。它支持复杂的分析函数、窗口函数和专用数据类型。另一方面，MySQL 使用 SQL（结构化查询语言），这是许多其他数据库系统中使用的标准数据库语言。</p>
<h3 id="横向扩展"><a href="#横向扩展" class="headerlink" title="横向扩展"></a>横向扩展</h3><p>可扩展性：ClickHouse 旨在处理繁重的分析工作负载，并可以有效地并行处理大量数据。它可以通过向集群添加更多服务器来轻松水平扩展，从而实现高性能和吞吐量。另一方面，MySQL 可能面临大型数据集或复杂查询的可伸缩性挑战，尤其是在处理聚合和联接时。</p>
<p>数据复制：ClickHouse 支持异步数据复制，可以低延迟地将数据从一台服务器复制到另一台服务器。此功能对于高可用性和灾难恢复方案至关重要。MySQL 还支持数据复制，但它为不同的复制拓扑（如主从复制和主-主复制）提供了更大的灵活性。</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>ClickHouse 提供了多种针对分析处理优化的专用数据类型，如 UInt8、Int32、Float64、Date 等。它还支持数组和嵌套结构，使其适用于处理复杂的数据格式。MySQL 有一组标准的数据类型，但它缺少 ClickHouse 提供的一些专用数据类型。</p>
<h3 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h3><p>ClickHouse 专门针对分析查询进行了优化，可以提供极快的查询响应时间，特别是对于大型数据集。它通过利用各种性能优化（如矢量化查询执行、数据压缩和并行处理）来实现这一点。MySQL 更像是一个通用数据库，虽然它可以处理分析工作负载，但它可能无法提供与 ClickHouse 相同的性能水平。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综上所述，ClickHouse 和 MySQL 在存储引擎、查询语言、可扩展性、数据复制、数据类型和性能方面存在差异。虽然 MySQL 非常适合事务性工作负载，但 ClickHouse 在处理大规模分析处理方面表现出色。</p>
]]></content>
  </entry>
  <entry>
    <title>数据库插入大量数据</title>
    <url>/2024/bulk-insert/</url>
    <content><![CDATA[<p>在工作中遇到了一次性大批量向数据库插入数据的需求，调研了网络上的方法，发现都比较片面，在此记录整合测试并记录结果。</p>
<span id="more"></span>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>线程数</td>
<td>插入任务工作线程数</td>
</tr>
<tr>
<td>块处理大小</td>
<td>每个线程插入多少数据</td>
</tr>
<tr>
<td>事务</td>
<td>是否开启自动提交</td>
</tr>
<tr>
<td>插入方式</td>
<td>插入使用的 Java 工具</td>
</tr>
</tbody></table>
<h2 id="预设场景"><a href="#预设场景" class="headerlink" title="预设场景"></a>预设场景</h2><p>新建如下表：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `excel` (</span><br><span class="line">  `id` <span class="type">int</span>,</span><br><span class="line">  `str` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `num1` <span class="type">int</span>,</span><br><span class="line">  `num2` <span class="type">decimal</span>(<span class="number">26</span>,<span class="number">6</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>测试数据量一百万；测试工具采用 JMH，JVM 参数 <code>-Xmx2048m</code>，预热一个迭代，测试一个迭代。</p>
<h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><h3 id="单条自动提交插入"><a href="#单条自动提交插入" class="headerlink" title="单条自动提交插入"></a>单条自动提交插入</h3><h4 id="指标"><a href="#指标" class="headerlink" title="指标"></a>指标</h4><p>单线程，开启自动提交，一次插入一百万条，耗时 <code>404.208</code> 秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                      (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingJdbc                             true      1000000            1    ss              404.208            s/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate               true      1000000            1    ss                4.648          MB/sec</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate.norm          true      1000000            1    ss       1970534360.000            B/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.count                    true      1000000            1    ss               20.000          counts</span><br><span class="line">InsertTest.insertUsingJdbc:gc.time                     true      1000000            1    ss              152.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>168</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (0,’b7e6bab0-0b70-476e-b0c5-67f63c624ffe’,-1155869325,0.10047321632624884) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
<tr>
<td>172</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (999999,’f32153e6-1bb4-4596-8571-9ba95083251e’,-108551299,0.18810693725825245) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>TODO</p>
<h3 id="单条开启事务插入"><a href="#单条开启事务插入" class="headerlink" title="单条开启事务插入"></a>单条开启事务插入</h3><h4 id="指标-1"><a href="#指标-1" class="headerlink" title="指标"></a>指标</h4><p>在单条自动提交插入的基础上，关闭自动提交，耗时 <code>142.557</code> 秒。数据库进程占用单核 100%，JMH 进程占用单核约 70%。</p>
<p>gc 分析，内存未成瓶颈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                      (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingJdbc                            false      1000000            1    ss              142.557            s/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate              false      1000000            1    ss               13.172          MB/sec</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate.norm         false      1000000            1    ss       1970529472.000            B/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.count                   false      1000000            1    ss               20.000          counts</span><br><span class="line">InsertTest.insertUsingJdbc:gc.time                    false      1000000            1    ss              144.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包-1"><a href="#抓包-1" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>67</td>
<td>Request Query { SET autocommit&#x3D;0 }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>168</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (0,’917500d6-f728-45a2-a9c7-51ccdfe8492f’,-1155869325,0.10047321632624884) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
<tr>
<td>170</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (999999,’1bc1fec1-196e-4475-b95f-b49debc27a61’,448512374,0.7160586140831305) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>57</td>
<td>Request Query { commit }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h4><p>收到</p>
<h3 id="分块插入"><a href="#分块插入" class="headerlink" title="分块插入"></a>分块插入</h3><h4 id="指标-2"><a href="#指标-2" class="headerlink" title="指标"></a>指标</h4><p>在单条开启事务插入的基础上，每一万条执行一次插入并提交，耗时 <code>141.419</code> 秒。<br>数据库进程占用单核 100%，JMH 进程占用单核约 70%。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                      (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingJdbc                            false        10000            1    ss              141.419            s/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate              false        10000            1    ss               12.769          MB/sec</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate.norm         false        10000            1    ss       1894859496.000            B/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.count                   false        10000            1    ss               12.000          counts</span><br><span class="line">InsertTest.insertUsingJdbc:gc.time                    false        10000            1    ss               28.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包-2"><a href="#抓包-2" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>67</td>
<td>Request Query { SET autocommit&#x3D;0 }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>168</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (0,’cf70b768-cbd0-4120-98b8-e9f7782e1773’,-1155869325,0.10047321632624884) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
<tr>
<td>169</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (9999,’948f52ac-ab58-489f-a2b9-03b177988bf8’,-647914709,0.8473246929075271) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>57</td>
<td>Request Query { commit }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h4><p>收到</p>
<h3 id="多线程插入"><a href="#多线程插入" class="headerlink" title="多线程插入"></a>多线程插入</h3><h4 id="指标-3"><a href="#指标-3" class="headerlink" title="指标"></a>指标</h4><p>在分块插入的基础上，使用两个线程进行插入，耗时 <code>74.593</code> 秒。<br>数据库进程占用双核约 100%，JMH 进程占用双核约 80%</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                      (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingJdbc                            false        10000            2    ss               74.593            s/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate              false        10000            2    ss               25.316          MB/sec</span><br><span class="line">InsertTest.insertUsingJdbc:gc.alloc.rate.norm         false        10000            2    ss       1982983536.000            B/op</span><br><span class="line">InsertTest.insertUsingJdbc:gc.count                   false        10000            2    ss               13.000          counts</span><br><span class="line">InsertTest.insertUsingJdbc:gc.time                    false        10000            2    ss               71.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包-3"><a href="#抓包-3" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>67</td>
<td>Request Query { SET autocommit&#x3D;0 }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>169</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (10000,’0ef84341-0b83-42ba-a2a7-370bd80ba73b’,159420602,0.6595096672661478) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>…</td>
<td></td>
</tr>
<tr>
<td>170</td>
<td>Request Query { insert into excel(id,str,num1,num2) values (19999,’7854ceb9-b4e8-48d2-bcbc-84264eb62c86’,121622524,0.02095196101276786) }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>57</td>
<td>Request Query { commit }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h4><p>收到</p>
<h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><h4 id="指标-4"><a href="#指标-4" class="headerlink" title="指标"></a>指标</h4><p>在多线程插入的基础上，使用 JDBC 批量方式进行插入，耗时 <code>7.588</code> 秒。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                           (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingJdbcBatch                            false        10000            2    ss                7.588            s/op</span><br><span class="line">InsertTest.insertUsingJdbcBatch:gc.alloc.rate              false        10000            2    ss              408.077          MB/sec</span><br><span class="line">InsertTest.insertUsingJdbcBatch:gc.alloc.rate.norm         false        10000            2    ss       3296496864.000            B/op</span><br><span class="line">InsertTest.insertUsingJdbcBatch:gc.count                   false        10000            2    ss               13.000          counts</span><br><span class="line">InsertTest.insertUsingJdbcBatch:gc.time                    false        10000            2    ss              170.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包-4"><a href="#抓包-4" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>67</td>
<td>Request Query { SET autocommit&#x3D;0 }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>6168</td>
<td>5 Request Query { insert into excel(id,str,num1,num2) values (990000,’bde044cf-7a5e-4276-843f-ea4edcc5767c’,-735746651,0.13858670433892972), (990001,’0ee29aa2-5bd8-4d11-b6aa-cb05670956f2’,-1905500790,0.6754577365082505)…}</td>
</tr>
<tr>
<td>104</td>
<td>Response OK</td>
</tr>
<tr>
<td>57</td>
<td>Request Query { commit }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h4><p>TODO</p>
<h3 id="LOAD-DATA-LOCAL-INFILE"><a href="#LOAD-DATA-LOCAL-INFILE" class="headerlink" title="LOAD DATA LOCAL INFILE"></a>LOAD DATA LOCAL INFILE</h3><p><code>LOAD DATA LOCAL INFILE</code> 是 <code>MySQL</code> 的将文件导入到数据库的方法。</p>
<p>在 Java 中使用 <code>com.mysql.cj.jdbc.JdbcStatement.setLocalInfileInputStream(InputStream stream)</code> 设置输入流，执行 SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">load data <span class="keyword">local</span> infile <span class="string">&#x27;noname&#x27;</span> <span class="keyword">into</span> <span class="keyword">table</span> excel(id,str,num1,num2)</span><br></pre></td></tr></table></figure>

<p>即可将流中的内容导入到数据库。</p>
<h4 id="指标-5"><a href="#指标-5" class="headerlink" title="指标"></a>指标</h4><p>在多线程插入的基础上，使用该方法进行插入，耗时 <code>5.174</code> 秒。<br>数据库进程占</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Benchmark                                               (autoCommit)  (chunkSize)  (threadNum)  Mode  Cnt           Score   Error   Units</span><br><span class="line">InsertTest.insertUsingMySqlLoadData                            false        10000            2    ss                5.174            s/op</span><br><span class="line">InsertTest.insertUsingMySqlLoadData:gc.alloc.rate              false        10000            2    ss              373.348          MB/sec</span><br><span class="line">InsertTest.insertUsingMySqlLoadData:gc.alloc.rate.norm         false        10000            2    ss       2072046888.000            B/op</span><br><span class="line">InsertTest.insertUsingMySqlLoadData:gc.count                   false        10000            2    ss               10.000          counts</span><br><span class="line">InsertTest.insertUsingMySqlLoadData:gc.time                    false        10000            2    ss               59.000              ms</span><br></pre></td></tr></table></figure>

<h4 id="抓包-5"><a href="#抓包-5" class="headerlink" title="抓包"></a>抓包</h4><table>
<thead>
<tr>
<th>Length</th>
<th>Info</th>
</tr>
</thead>
<tbody><tr>
<td>67</td>
<td>Request Query { SET autocommit&#x3D;0 }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
<tr>
<td>117</td>
<td>Request Query { load data local infile ‘noname’ into table excel(id,str,num1,num2) }</td>
</tr>
<tr>
<td>55</td>
<td>Response LOCAL INFILE</td>
</tr>
<tr>
<td>1166</td>
<td>1 Request LOCAL INFILE Payload</td>
</tr>
<tr>
<td>48</td>
<td>Request</td>
</tr>
<tr>
<td>113</td>
<td>Response OK</td>
</tr>
<tr>
<td>57</td>
<td>Request Query { commit }</td>
</tr>
<tr>
<td>55</td>
<td>Response OK</td>
</tr>
</tbody></table>
<h4 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h4><p>TODO</p>
<pre><code class="highlight mermaid">xychart-beta
    title &quot;不同块大小下插入时间随线程数变化图&quot;
    x-axis &quot;线程数&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    y-axis &quot;时间（秒）&quot;
    %% false 100
    line [25.329,14.679,13.317,11.940,11.584,10.684,10.570,10.384,10.810,10.249,10.584,10.284,10.175,9.865,10.055,9.869]
    %% false 500
    line [15.735,10.224,8.676,8.000,7.252,6.830,6.543,6.116,6.054,5.788,5.885,5.722,5.687,6.337,5.520,6.056]
    %% false 1000
    line [14.628,8.819,7.855,7.818,6.963,6.180,6.038,5.874,5.276,5.190,5.296,5.191,5.261,5.329,5.091,5.513]
    %% false 5000
    line [13.138,7.553,6.351,6.405,5.374,5.013,4.979,4.654,4.705,5.022,5.141,5.139,5.087,4.979,5.446,4.769]
    %% false 10000
    line [12.816,7.580,6.648,5.764,5.428,5.266,4.926,4.808,5.309,5.624,5.684,5.594,5.610,5.702,5.748,5.686]
    %% false 50000
    line [14.219,8.848,8.089,8.169,7.358,6.955,6.665,6.710,6.837,6.869,7.051,7.057,6.845,6.633,7.156,7.301]
    %% false 100000
    line [15.118,9.094,8.108,7.671,7.315,7.192,7.510,7.208,8.290,7.541,7.833,7.632,8.001,8.454,7.659,7.951]</code></pre>

<pre><code class="highlight mermaid">xychart-beta
    title &quot;不同块大小下插入时间随线程数变化图&quot;
    x-axis &quot;线程数&quot; [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]
    y-axis &quot;时间（秒）&quot;
    %% false 100
    line [21.202,13.765,12.118,11.456,11.109,10.546,12.027,10.338,10.256,9.947,10.101,10.028,9.692,9.582,9.570,9.330]
    %% false 500
    line [11.807,8.421,7.275,6.838,6.173,5.932,5.599,5.556,5.247,5.251,5.169,5.102,4.963,5.116,5.081,4.938]
    %% false 1000
    line [10.147,7.002,5.980,5.468,5.032,4.885,4.857,4.593,4.635,4.272,4.440,4.338,4.251,4.368,4.669,4.164]
    %% false 5000
    line [8.048,5.407,4.986,4.449,4.030,3.888,3.673,3.743,3.568,3.579,3.646,3.607,3.540,3.581,3.907,3.977]
    %% false 10000
    line [7.882,5.466,4.885,4.351,3.944,3.665,3.455,3.612,3.520,3.455,3.594,3.479,3.559,3.528,3.522,3.555]
    %% false 100000
    line [8.462,5.423,5.099,4.564,4.291,4.610,4.277,4.203,4.265,4.244,4.241,4.699,4.393,4.298,4.252,4.233]</code></pre>

<h2 id="额外优化"><a href="#额外优化" class="headerlink" title="额外优化"></a>额外优化</h2><h3 id="只读模式检查"><a href="#只读模式检查" class="headerlink" title="只读模式检查"></a>只读模式检查</h3><p>在对批量插入方式进行抓包分析时，发现应用每次执行 <code>insert</code> 语句前会查询数据库连接是否为只读模式，查询内容为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Length Info</span><br><span class="line">89	Request Query &#123; SELECT @@session.transaction_read_only &#125;</span><br><span class="line">123	Response TABULAR Response  OK</span><br></pre></td></tr></table></figure>

<p>分析源码，相关的调用栈为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">isReadOnly:1356, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">isReadOnly:1349, ConnectionImpl (com.mysql.cj.jdbc)</span><br><span class="line">executeBatchInternal:384, ClientPreparedStatement (com.mysql.cj.jdbc)</span><br><span class="line">executeBatch:799, StatementImpl (com.mysql.cj.jdbc)</span><br></pre></td></tr></table></figure>

<p>关键函数内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">(<span class="type">boolean</span> useSessionStatus)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="comment">// 服务器版本大于 5.6.5，useLocalSessionState 为 false，readOnlyPropagatesToServer 为 true</span></span><br><span class="line">    <span class="keyword">if</span> (useSessionStatus &amp;&amp; !<span class="built_in">this</span>.session.isClosed() &amp;&amp; versionMeetsMinimum(<span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">            &amp;&amp; !<span class="built_in">this</span>.useLocalSessionState.getValue() &amp;&amp; <span class="built_in">this</span>.readOnlyPropagatesToServer.getValue()) &#123;</span><br><span class="line">        <span class="comment">// 服务器版本大于等于 8.0.3 或 [5.7.20, 8.0.0) 使用变量 &quot;@@session.transaction_read_only&quot;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="built_in">this</span>.session.queryServerVariable(</span><br><span class="line">                versionMeetsMinimum(<span class="number">8</span>, <span class="number">0</span>, <span class="number">3</span>) || versionMeetsMinimum(<span class="number">5</span>, <span class="number">7</span>, <span class="number">20</span>) &amp;&amp; !versionMeetsMinimum(<span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">                        ? <span class="string">&quot;@@session.transaction_read_only&quot;</span></span><br><span class="line">                        : <span class="string">&quot;@@session.tx_read_only&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (s != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 非 0 为真</span></span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s) != <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.readOnly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MySQL JDBC Driver 执行 <code>executeBatch</code> 时每次会检查连接是否只读模式，如果是只读模式会抛出异常。<br>当服务器版本大于 <code>5.6.5</code>，<code>useLocalSessionState</code> 为 <code>false</code>，<code>readOnlyPropagatesToServer</code> 为 <code>true</code> 时，驱动会向服务器发送查询请求。属性说明如下</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>默认</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>useLocalSessionState</td>
<td>false</td>
<td>驱动程序是否使用内部维护的自动提交和事务隔离值</td>
</tr>
<tr>
<td>readOnlyPropagatesToServer</td>
<td>true</td>
<td>调用  Connection.setReadOnly() 时是否设置服务器事务模式，开启 InnoDB 只读优化</td>
</tr>
</tbody></table>
<p>解决方案是 <code>useLocalSessionState</code> 设置为 <code>true</code> 避免多余的查询。</p>
]]></content>
      <categories>
        <category>解决问题</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat 的三种 IO 模型</title>
    <url>/2023/tomcat-io/</url>
    <content><![CDATA[<p>在用 Java 手写服务器示例代码的时候有一些疑惑，加之日常开发中只对 Tomcat 有浅显的理解，知道其是用线程池处理请求，所以就翻了翻 Tomcat 的源代码。本文记录 Tomcat 中 IO 模型的相关代码，版本为 tomcat-embed-core:9.0.78。</p>
<span id="more"></span>

<p>Tomcat 支持的 IO 模型有 APR、NIO、NIO2 三种。</p>
<p>APR、NIO 两种实现方式本质上都是 reactor 模式，使用 IO 多路复用和线程池实现并发处理多个客户端请求。使用的是主从 reactor 多线程模型。其中 acceptor 为主 reactor，负责接受新连接。poller 为从 reactor，负责监控 IO 事件，worker 为执行 IO 操作和业务代码的线程池。</p>
<h2 id="endpoint"><a href="#endpoint" class="headerlink" title="endpoint"></a>endpoint</h2><p>Tomcat 中封装 IO 相关方法的类叫做 endpoint，负责创建 acceptor, poller, worker 等对象，并负责这几个类之间的交互，作用是胶水代码。<br>抽象类为 AbstractEndpoint，具体的子类有 AprEndpoint、NioEndpoint 和 Nio2Endpoint，分别代表 APR、NIO 和 NIO2 三种 IO 模型。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractEndpoint</span>&lt;S,U&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定并监听地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * endpoint 的入口，用于启动 acceptor, poller, worker</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 worker 线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createExecutor</span><span class="params">()</span> &#123;</span><br><span class="line">        internalExecutor = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (getUseVirtualThreads()) &#123;</span><br><span class="line">            <span class="comment">// 创建 Java 21 虚拟线程池</span></span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">VirtualThreadExecutor</span>(getName() + <span class="string">&quot;-virt-&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建多线程线程池，默认核心线程数 10，最大线程数 200，优先级 5</span></span><br><span class="line">            <span class="type">TaskQueue</span> <span class="variable">taskqueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskQueue</span>();</span><br><span class="line">            <span class="type">TaskThreadFactory</span> <span class="variable">tf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TaskThreadFactory</span>(getName() + <span class="string">&quot;-exec-&quot;</span>, daemon, getThreadPriority());</span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">            taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建并启动 acceptor 线程，APR, NIO 使用该默认实现，NIO2 重写了该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startAcceptorThread</span><span class="params">()</span> &#123;</span><br><span class="line">        acceptor = <span class="keyword">new</span> <span class="title class_">Acceptor</span>&lt;&gt;(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">threadName</span> <span class="operator">=</span> getName() + <span class="string">&quot;-Acceptor&quot;</span>;</span><br><span class="line">        acceptor.setThreadName(threadName);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(acceptor, threadName);</span><br><span class="line">        t.setPriority(getAcceptorThreadPriority());</span><br><span class="line">        t.setDaemon(getDaemon());</span><br><span class="line">        t.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受连接，被 acceptor 调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> U <span class="title function_">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置连接，被 acceptor 调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">setSocketOptions</span><span class="params">(U socket)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 socket 事件，被 poller 调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">processSocket</span><span class="params">(SocketWrapperBase&lt;S&gt; socketWrapper,</span></span><br><span class="line"><span class="params">            SocketEvent event, <span class="type">boolean</span> dispatch)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取 socket 处理器</span></span><br><span class="line">            SocketProcessorBase&lt;S&gt; sc = createSocketProcessor(socketWrapper, event);</span><br><span class="line">            <span class="comment">// 处理 socket 事件，根据 dispatch 判断是否使用 worker 处理</span></span><br><span class="line">            <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> getExecutor();</span><br><span class="line">            <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="literal">null</span>) &#123;</span><br><span class="line">                executor.execute(sc);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sc.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 socket 处理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> SocketProcessorBase&lt;S&gt; <span class="title function_">createSocketProcessor</span><span class="params">(</span></span><br><span class="line"><span class="params">            SocketWrapperBase&lt;S&gt; socketWrapper, SocketEvent event)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AprEndpoint"><a href="#AprEndpoint" class="headerlink" title="AprEndpoint"></a>AprEndpoint</h3><p>该类将在 Tomcat 10 被废弃，APR 通过 JNI 进行 socket 操作，相比使用 Java IO API 效率更高。<br>使用该类会创建以下线程（池）</p>
<ul>
<li>acceptor 线程</li>
<li>poller 线程</li>
<li>sendfile 线程</li>
<li>worker 线程池</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AprEndpoint</span> <span class="keyword">extends</span> <span class="title class_">AbstractEndpoint</span>&lt;Long,Long&gt; <span class="keyword">implements</span> <span class="title class_">SNICallBack</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定并监听地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">serverSock</span> <span class="operator">=</span> Socket.create(family, Socket.SOCK_STREAM, <span class="number">0</span>, rootPool);</span><br><span class="line">        <span class="type">int</span> <span class="variable">ret</span> <span class="operator">=</span> Socket.bind(serverSock, sockAddress);</span><br><span class="line">        ret = Socket.listen(serverSock, getAcceptCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 APR endpoint，启动 acceptor, poller, sendfile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">            running = <span class="literal">true</span>;</span><br><span class="line">            paused = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建 worker 线程池</span></span><br><span class="line">            <span class="keyword">if</span> (getExecutor() == <span class="literal">null</span>) &#123;</span><br><span class="line">                createExecutor();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动 poller 线程</span></span><br><span class="line">            poller = <span class="keyword">new</span> <span class="title class_">Poller</span>();</span><br><span class="line">            poller.init();</span><br><span class="line">            poller.start();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动 sendfile 线程</span></span><br><span class="line">            <span class="keyword">if</span> (getUseSendfile()) &#123;</span><br><span class="line">                sendfile = <span class="keyword">new</span> <span class="title class_">Sendfile</span>();</span><br><span class="line">                sendfile.init();</span><br><span class="line">                sendfile.start();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 启动 acceptor 线程</span></span><br><span class="line">            startAcceptorThread();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AprEndpoint 接受连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Long <span class="title function_">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">socket</span> <span class="operator">=</span> Socket.accept(serverSock);</span><br><span class="line">        <span class="keyword">return</span> Long.valueOf(socket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AprEndpoint 设置连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">setSocketOptions</span><span class="params">(Long socket)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">AprSocketWrapper</span> <span class="variable">wrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AprSocketWrapper</span>(socket, <span class="built_in">this</span>);</span><br><span class="line">            connections.put(socket, wrapper);</span><br><span class="line">            wrapper.setKeepAliveLeft(getMaxKeepAliveRequests());</span><br><span class="line">            wrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">            wrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">            getExecutor().execute(<span class="keyword">new</span> <span class="title class_">SocketWithOptionsProcessor</span>(wrapper));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把socket交给poller处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">SocketWithOptionsProcessor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> socket.getLock();</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getPoller().add(socket.getSocket().longValue(), getConnectionTimeout(), Poll.APR_POLLIN);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NioEndpoint"><a href="#NioEndpoint" class="headerlink" title="NioEndpoint"></a>NioEndpoint</h3><p>NioEndpoint 通过 Java NIO 进行同步非阻塞 IO 操作。相比使用同步阻塞 IO，大大减少了高并发下所需线程的数量，因而效率更高。</p>
<p>使用该类会创建以下线程（池）</p>
<ul>
<li>acceptor 线程（阻塞接受新连接）</li>
<li>poller 线程（配置 IO 多路复用，检测 IO 事件）</li>
<li>worker 线程池（处理 IO 事件）</li>
</ul>
<p>acceptor 循环接受连接并将注册事件放入 poller 的事件队列，poller 循环处理事件队列中的事件并检测 IO 事件，如果发生 IO 事件让 worker 进行 IO 操作并执行业务代码。</p>
<p>功能示意图如下</p>
<p><img src="/2023/tomcat-io/nio.png" alt="NIO"></p>
<p>向服务器发出一个请求，查看线程状态。编号 1-10 的线程为 worker 线程。</p>
<p><img src="/2023/tomcat-io/nio%E7%BA%BF%E7%A8%8B.png" alt="NIO thread"></p>
<p>收到请求后，一个 worker 线程由 Park 状态转为 Running 状态；接着服务器访问外部服务，等待 IO 期间线程转为 Wait 状态；访问外部服务完成后整个请求结束，线程又转为 Park 状态。</p>
<p>NIO 相关代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NioEndpoint</span> <span class="keyword">extends</span> <span class="title class_">AbstractJsseEndpoint</span>&lt;NioChannel,SocketChannel&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定并监听地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        serverSock = ServerSocketChannel.open();</span><br><span class="line">        socketProperties.setProperties(serverSock.socket());</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(getAddress(), getPortWithOffset());</span><br><span class="line">        serverSock.bind(addr, getAcceptCount());</span><br><span class="line">        serverSock.configureBlocking(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 NIO endpoint，启动 acceptor, poller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (!running) &#123;</span><br><span class="line">            running = <span class="literal">true</span>;</span><br><span class="line">            paused = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 创建 worker 线程池</span></span><br><span class="line">            <span class="keyword">if</span> (getExecutor() == <span class="literal">null</span>) &#123;</span><br><span class="line">                createExecutor();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 启动 poller 线程</span></span><br><span class="line">            poller = <span class="keyword">new</span> <span class="title class_">Poller</span>();</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">pollerThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(poller, getName() + <span class="string">&quot;-Poller&quot;</span>);</span><br><span class="line">            pollerThread.setPriority(threadPriority);</span><br><span class="line">            pollerThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            pollerThread.start();</span><br><span class="line">            <span class="comment">// 启动 acceptor 线程</span></span><br><span class="line">            startAcceptorThread();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NioEndpoint 接受连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SocketChannel <span class="title function_">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 阻塞接受连接</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">result</span> <span class="operator">=</span> serverSock.accept();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NioEndpoint 设置连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">setSocketOptions</span><span class="params">(SocketChannel socket)</span> &#123;</span><br><span class="line">        <span class="type">NioSocketWrapper</span> <span class="variable">socketWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SocketBufferHandler</span> <span class="variable">bufhandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketBufferHandler</span>(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            <span class="type">NioChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioChannel</span>(bufhandler);</span><br><span class="line">            <span class="type">NioSocketWrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioSocketWrapper</span>(channel, <span class="built_in">this</span>);</span><br><span class="line">            channel.reset(socket, newWrapper);</span><br><span class="line">            connections.put(socket, newWrapper);</span><br><span class="line">            socketWrapper = newWrapper;</span><br><span class="line">            <span class="comment">// 因使用 IO 多路复用，设置为非阻塞 IO</span></span><br><span class="line">            socket.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (getUnixDomainSocketPath() == <span class="literal">null</span>) &#123;</span><br><span class="line">                socketProperties.setProperties(socket.socket());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            socketWrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">            socketWrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">            socketWrapper.setKeepAliveLeft(NioEndpoint.<span class="built_in">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">            <span class="comment">// 将 socket 注册到 poller</span></span><br><span class="line">            poller.register(socketWrapper);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nio2Endpoint"><a href="#Nio2Endpoint" class="headerlink" title="Nio2Endpoint"></a>Nio2Endpoint</h3><p>Nio2Endpoint 通过 Java NIO 进行异步 IO 操作，相比使用同步非阻塞 IO，应用不需将数据拷贝到进程中，而由内核代为完成后通知应用，执行回调。Java 异步 IO 在 Windows 中通过 IOCP 实现，在 Linux 中通过 epoll 模拟实现，所以理论上在 Linux 下同步非阻塞 IO 和异步 IO 的效率无明显差别。</p>
<p>使用该类会创建以下线程（池）</p>
<ul>
<li>acceptor 线程</li>
<li>worker 线程池</li>
</ul>
<p>相比同步非阻塞 IO，少了 poller，操作系统承担了 poller 的工作和。</p>
<p>功能示意图如下</p>
<p><img src="/2023/tomcat-io/nio2.png" alt="NIO2"></p>
<p>向服务器发出一个请求，查看线程状态。编号 1-10 的线程为 worker 线程。</p>
<p><img src="/2023/tomcat-io/nio2%E7%BA%BF%E7%A8%8B.png" alt="NIO2 thread"></p>
<p>收到请求后，一个 worker 线程由 Park 状态转为 Running 状态；接着服务器访问外部服务，等待 IO 期间线程转为 Wait 状态；访问外部服务完成后整个请求结束，线程又转为 Park 状态。</p>
<p>NIO2 相关代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * NIO2 endpoint.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Nio2Endpoint</span> <span class="keyword">extends</span> <span class="title class_">AbstractJsseEndpoint</span>&lt;Nio2Channel,AsynchronousSocketChannel&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定并监听地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 使用 worker 线程池处理 IO 事件</span></span><br><span class="line">        threadGroup = AsynchronousChannelGroup.withThreadPool((ExecutorService) getExecutor());</span><br><span class="line">        serverSock = AsynchronousServerSocketChannel.open(threadGroup);</span><br><span class="line">        socketProperties.setProperties(serverSock);</span><br><span class="line">        <span class="type">InetSocketAddress</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(getAddress(), getPortWithOffset());</span><br><span class="line">        <span class="comment">// 绑定地址</span></span><br><span class="line">        serverSock.bind(addr, getAcceptCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 NIO2 endpoint, 启动 acceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建 worker 线程池</span></span><br><span class="line">        <span class="keyword">if</span> (getExecutor() == <span class="literal">null</span>) &#123;</span><br><span class="line">            createExecutor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 启动 acceptor 线程</span></span><br><span class="line">        startAcceptorThread();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动 NIO2 acceptor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">startAcceptorThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (acceptor == <span class="literal">null</span>) &#123;</span><br><span class="line">            acceptor = <span class="keyword">new</span> <span class="title class_">Nio2Acceptor</span>(<span class="built_in">this</span>);</span><br><span class="line">            acceptor.setThreadName(getName() + <span class="string">&quot;-Acceptor&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用 worker 线程池启动 accepor</span></span><br><span class="line">        getExecutor().execute(acceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞接受连接，该方法未被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AsynchronousSocketChannel <span class="title function_">serverSocketAccept</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">AsynchronousSocketChannel</span> <span class="variable">result</span> <span class="operator">=</span> serverSock.accept().get();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Nio2Endpoint 设置连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">setSocketOptions</span><span class="params">(AsynchronousSocketChannel socket)</span> &#123;</span><br><span class="line">        <span class="type">Nio2SocketWrapper</span> <span class="variable">socketWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SocketBufferHandler</span> <span class="variable">bufhandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketBufferHandler</span>(</span><br><span class="line">                    socketProperties.getAppReadBufSize(),</span><br><span class="line">                    socketProperties.getAppWriteBufSize(),</span><br><span class="line">                    socketProperties.getDirectBuffer());</span><br><span class="line">            <span class="type">Nio2Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Nio2Channel</span>(bufhandler);</span><br><span class="line">            <span class="type">Nio2SocketWrapper</span> <span class="variable">newWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Nio2SocketWrapper</span>(channel, <span class="built_in">this</span>);</span><br><span class="line">            channel.reset(socket, newWrapper);</span><br><span class="line">            connections.put(socket, newWrapper);</span><br><span class="line">            socketWrapper = newWrapper;</span><br><span class="line"></span><br><span class="line">            socketProperties.setProperties(socket);</span><br><span class="line">            socketWrapper.setReadTimeout(getConnectionTimeout());</span><br><span class="line">            socketWrapper.setWriteTimeout(getConnectionTimeout());</span><br><span class="line">            socketWrapper.setKeepAliveLeft(Nio2Endpoint.<span class="built_in">this</span>.getMaxKeepAliveRequests());</span><br><span class="line">            <span class="comment">// 调用 AbstractEndpoint.processSocket 方法处理 IO 事件。因为是异步 IO，所以不需要使用新线程处理 IO 事件</span></span><br><span class="line">            <span class="keyword">return</span> processSocket(socketWrapper, SocketEvent.OPEN_READ, <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">SocketProcessor</span> <span class="keyword">extends</span> <span class="title class_">SocketProcessorBase</span>&lt;Nio2Channel&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被 AbstractEndpoint.processSocket 调用，处理 IO 事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">launch</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">SocketState</span> <span class="variable">state</span> <span class="operator">=</span> SocketState.OPEN;</span><br><span class="line">            <span class="comment">// 处理 IO 事件</span></span><br><span class="line">            <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">                state = getHandler().process(socketWrapper, SocketEvent.OPEN_READ);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                state = getHandler().process(socketWrapper, event);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (state == SocketState.UPGRADING) &#123;</span><br><span class="line">                launch = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (launch) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 使用新线程处理 IO 事件</span></span><br><span class="line">                    getExecutor().execute(<span class="keyword">new</span> <span class="title class_">SocketProcessor</span>(socketWrapper, SocketEvent.OPEN_READ));</span><br><span class="line">                &#125; <span class="keyword">catch</span> (NullPointerException npe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="acceptor"><a href="#acceptor" class="headerlink" title="acceptor"></a>acceptor</h2><p>acceptor 的功能如其名称，用于接受 socket 连接请求。产生一个与客户端的连接的 socket 后，再将其交给 poller 处理。<br>acceptor 的代码逻辑特别简单，不断地调用 <code>endpoint.serverSocketAccept</code> 产生 socket 连接，调用 <code>endpoint.setSocketOptions</code> 设置 socket。</p>
<h3 id="Acceptor"><a href="#Acceptor" class="headerlink" title="Acceptor"></a>Acceptor</h3><p>NIO、APR 的 acceptor 为类 Acceptor，Acceptor 主要代码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Acceptor</span>&lt;U&gt; <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在线程中循环接受新连接直到收到关闭命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">errorDelay</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stopCalled) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 接受连接</span></span><br><span class="line">                <span class="type">U</span> <span class="variable">socket</span> <span class="operator">=</span> endpoint.serverSocketAccept();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ioe) &#123;</span><br><span class="line">                <span class="comment">// 连接失败进行延时操作</span></span><br><span class="line">                errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// endpoint 设置连接，处理失败则关闭连接</span></span><br><span class="line">            <span class="keyword">if</span> (!endpoint.setSocketOptions(socket)) &#123;</span><br><span class="line">                endpoint.closeSocket(socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延时时长指数增加，防止短时间内产生大量错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">INITIAL_ERROR_DELAY</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAX_ERROR_DELAY</span> <span class="operator">=</span> <span class="number">1600</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">handleExceptionWithDelay</span><span class="params">(<span class="type">int</span> currentErrorDelay)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一次不延时</span></span><br><span class="line">        <span class="keyword">if</span> (currentErrorDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Thread.sleep(currentErrorDelay);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (currentErrorDelay == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> INITIAL_ERROR_DELAY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentErrorDelay &lt; MAX_ERROR_DELAY) &#123;</span><br><span class="line">            <span class="keyword">return</span> currentErrorDelay * <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> MAX_ERROR_DELAY;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Nio2Acceptor"><a href="#Nio2Acceptor" class="headerlink" title="Nio2Acceptor"></a>Nio2Acceptor</h3><p>NIO2 中的 acceptor 为类 Nio2Acceptor，Nio2Acceptor 重写了 Acceptor 的 <code>run</code> 方法，用异步 IO 替代同步 IO。且实现了 CompletionHandler 接口，用于处理异步 IO 完成事件。</p>
<p>Nio2Acceptor 的主要代码如下，其中没有调用 <code>endpoint.serverSocketAccept</code> 产生 socket，而是直接调用 <code>serverSock.accept</code> 产生 socket，另一个异同是 Nio2Acceptor 的 run 方法中没有循环，而是通过异步 IO 的回调函数重新接受新请求。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">class</span> <span class="title class_">Nio2Acceptor</span> <span class="keyword">extends</span> <span class="title class_">Acceptor</span>&lt;AsynchronousSocketChannel&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title class_">CompletionHandler</span>&lt;AsynchronousSocketChannel, Void&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 如果达到最大连接数，等待</span></span><br><span class="line">        countUpOrAwaitConnection();</span><br><span class="line">        <span class="comment">// 异步 IO，连接完成后由 completed 方法处理，失败由 failed 方法处理</span></span><br><span class="line">        serverSock.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理连接请求成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completed</span><span class="params">(AsynchronousSocketChannel socket,</span></span><br><span class="line"><span class="params">            Void attachment)</span> &#123;</span><br><span class="line">        <span class="comment">// 异步接受新请求</span></span><br><span class="line">        <span class="keyword">if</span> (getMaxConnections() == -<span class="number">1</span>) &#123;</span><br><span class="line">            serverSock.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getConnectionCount() &lt; getMaxConnections()) &#123;</span><br><span class="line">            countUpOrAwaitConnection();</span><br><span class="line">            serverSock.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 达到最大连接数，使用新线程接受请求</span></span><br><span class="line">            getExecutor().execute(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置 socket</span></span><br><span class="line">        <span class="keyword">if</span> (!setSocketOptions(socket)) &#123;</span><br><span class="line">            closeSocket(socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理连接请求失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(Throwable t, Void attachment)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getMaxConnections() == -<span class="number">1</span>) &#123;</span><br><span class="line">            serverSock.accept(<span class="literal">null</span>, <span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用新线程接受请求</span></span><br><span class="line">            getExecutor().execute(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownConnection();</span><br><span class="line">        <span class="comment">// 失败后等待一段事件</span></span><br><span class="line">        errorDelay = handleExceptionWithDelay(errorDelay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="poller"><a href="#poller" class="headerlink" title="poller"></a>poller</h2><p>poller 的作用是将新 socket 注册到 selector 并轮询是否有 IO 事件发生。</p>
<h3 id="APR-poller"><a href="#APR-poller" class="headerlink" title="APR poller"></a>APR poller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poller</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        pollerThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(poller, getName() + <span class="string">&quot;-Poller&quot;</span>);</span><br><span class="line">        pollerThread.setPriority(threadPriority);</span><br><span class="line">        pollerThread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">        pollerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SocketList</span> <span class="variable">localAddList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SocketList</span>(getMaxConnections());</span><br><span class="line">        <span class="keyword">while</span> (pollerRunning) &#123;</span><br><span class="line">            <span class="type">SocketInfo</span> <span class="variable">info</span> <span class="operator">=</span> localAddList.get();</span><br><span class="line">            <span class="keyword">while</span> (info != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// poll 操作</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">rv</span> <span class="operator">=</span> Poll.poll(aprPoller, pollTime, desc, <span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>; n &lt; rv; n++) &#123;</span><br><span class="line">                    processSocket();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="NIO-poller"><a href="#NIO-poller" class="headerlink" title="NIO poller"></a>NIO poller</h3><p>poller 负责两件事，处理 poller 事件，处理 IO 事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poller</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">wakeupCounter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// IO 多路复用选择器</span></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="comment">// poller 事件队列</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SynchronizedQueue&lt;PollerEvent&gt; events =</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">SynchronizedQueue</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 socket 的读事件注册到事件队列中，被 acceptor 调用 setSocketOptions 时间接调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(<span class="keyword">final</span> NioSocketWrapper socketWrapper)</span> &#123;</span><br><span class="line">        socketWrapper.interestOps(SelectionKey.OP_READ);</span><br><span class="line">        <span class="type">PollerEvent</span> <span class="variable">pollerEvent</span> <span class="operator">=</span> createPollerEvent(socketWrapper, OP_REGISTER);</span><br><span class="line">        addEvent(pollerEvent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addEvent</span><span class="params">(PollerEvent event)</span> &#123;</span><br><span class="line">        events.offer(event);</span><br><span class="line">        <span class="comment">// wakeupCounter 为 -1 时唤醒 selector，处理新事件</span></span><br><span class="line">        <span class="keyword">if</span> (wakeupCounter.incrementAndGet() == <span class="number">0</span>) &#123;</span><br><span class="line">            selector.wakeup();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 循环处理 poller 事件和 IO 事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">hasEvents</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                hasEvents = events();</span><br><span class="line">                <span class="comment">// 事件队列有新事件，wakeupCounter 为 -1 时，selector 正在进行 select 操作</span></span><br><span class="line">                <span class="keyword">if</span> (wakeupCounter.getAndSet(-<span class="number">1</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 检查有没有 IO，有 IO 先处理 IO</span></span><br><span class="line">                    keyCount = selector.selectNow();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 没有新事件就等待已注册 IO 的，默认超时 1000ms</span></span><br><span class="line">                    keyCount = selector.select(selectorTimeout);</span><br><span class="line">                &#125;</span><br><span class="line">                wakeupCounter.set(<span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 没有 socket 可读写</span></span><br><span class="line">                <span class="keyword">if</span> (keyCount == <span class="number">0</span>) &#123;</span><br><span class="line">                    hasEvents = (hasEvents | events());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 遍历 selector key，处理 IO 事件</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator =</span><br><span class="line">                keyCount &gt; <span class="number">0</span> ? selector.selectedKeys().iterator() : <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (iterator != <span class="literal">null</span> &amp;&amp; iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">sk</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                iterator.remove();</span><br><span class="line">                <span class="type">NioSocketWrapper</span> <span class="variable">socketWrapper</span> <span class="operator">=</span> (NioSocketWrapper) sk.attachment();</span><br><span class="line">                processKey(sk, socketWrapper);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理超时的连接</span></span><br><span class="line">            timeout(keyCount,hasEvents);</span><br><span class="line">        &#125;</span><br><span class="line">        getStopLatch().countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 poller 事件队列中的事件，如果处理了事件返回 true</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">events</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">PollerEvent</span> <span class="variable">pe</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, size = events.size(); i &lt; size &amp;&amp; (pe = events.poll()) != <span class="literal">null</span>; i++ ) &#123;</span><br><span class="line">            result = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">NioSocketWrapper</span> <span class="variable">socketWrapper</span> <span class="operator">=</span> pe.getSocketWrapper();</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">sc</span> <span class="operator">=</span> socketWrapper.getSocket().getIOChannel();</span><br><span class="line">            <span class="comment">// 注册读事件到 selector</span></span><br><span class="line">            sc.register(getSelector(), SelectionKey.OP_READ, socketWrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理 IO 事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processKey</span><span class="params">(SelectionKey sk, NioSocketWrapper socketWrapper)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (sk.isReadable() || sk.isWritable()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (socketWrapper.getSendfileData() != <span class="literal">null</span>) &#123;</span><br><span class="line">                processSendfile(sk, socketWrapper, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 先读再写</span></span><br><span class="line">                <span class="keyword">if</span> (sk.isReadable()) &#123;</span><br><span class="line">                    processSocket(socketWrapper, SocketEvent.OPEN_READ, <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (sk.isWritable()) &#123;</span><br><span class="line">                    processSocket(socketWrapper, SocketEvent.OPEN_WRITE, <span class="literal">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="AprEndpoint-1"><a href="#AprEndpoint-1" class="headerlink" title="AprEndpoint"></a>AprEndpoint</h3><p>跟 NioEndpoint 一样，AprEndpoint 也实现了非阻塞 I&#x2F;O，它们的区别是：NioEndpoint 通过调用 Java 的 NIO API 来实现非阻塞 I&#x2F;O，而 AprEndpoint 是通过 JNI 调用 APR 本地库而实现非阻塞 I&#x2F;O 的。在某些场景下，比如需要频繁与操作系统进行交互，Socket 网络通信就是这样一个场景， 特别是如果你的 Web 应用使用了 TLS 来加密传输，我们知道 TLS 协议在握手过程中有多 次网络交互，在这种情况下 Java 跟 C 语言程序相比还是有一定的差距，而这正是 APR 的 强项。Tomcat 本身是 Java 编写的，为了调用 C 语言编写的 APR，需要通过 JNI 方式来调用。 JNI（Java Native Interface） 是 JDK 提供的一个编程接口，它允许 Java 程序调用其他语 言编写的程序或者代码库，其实 JDK 本身的实现也大量用到 JNI 技术来调用本地 C 程序 库。</p>
<p>它跟 NioEndpoint 的工作原理很像，有 LimitLatch、Acceptor、Poller、 SocketProcessor 和 Http11Processor，只是 Acceptor 和 Poller 的实现和 NioEndpoint 不同。</p>
<p>Acceptor 接收到一个新的 Socket 连接后，按照 NioEndpoint 的实现，它会把这个 Socket 交给 Poller 去查询 I&#x2F;O 事件。AprEndpoint 也是这样做的，不过 AprEndpoint 的 Poller 并不是调用 Java NIO 里的 Selector 来查询 Socket 的状态，而是通过 JNI 调用 APR 中的 poll 方法，而 APR 又是调用了操作系统的 epoll API 来实现的。在 AprEndpoint 中，我们可以配置一个叫 deferAccept 的参数，它对应的是 TCP 协议中的 TCP_DEFER_ACCEPT，设置这个参数后，当 TCP 客户端有新的连接请求到达时，TCP 服务端先不建立连接，而是再等等，直到客户端有请求数据发过来时再建立连接。这样的好处是服务端不需要用 Selector 去反复查询请求数据是否就绪。这是一种 TCP 协议层的优化，不是每个操作系统内核都支持，因为 Java 作为一种跨平台语言，需要屏蔽各种操作系统的差异，因此并没有把这个参数提供给用户；但是对于 APR 来说，它的目的就是尽可能提升性能，因此它向用户暴露了这个参数。</p>
<h3 id="Nio2Endpoint-1"><a href="#Nio2Endpoint-1" class="headerlink" title="Nio2Endpoint"></a>Nio2Endpoint</h3><p>接口，</p>
<p>Accpetor 的功能就是监听连接，接收并建立连接。它的本质就是调用了四个操作系统 API：socket、bind、listen 和 accept。那 Java 语言如何直接调用 C 语言 API 呢？答案 就是通过 JNI。</p>
<p>其中两个重要组件：Acceptor 和 SocketProcessor。</p>
<p>Acceptor 用于监听 Socket 连接请求，SocketProcessor 用于处理收到的 Socket 请求，提交到线程池 Executor 处理。</p>
]]></content>
  </entry>
  <entry>
    <title>JDBC</title>
    <url>/2024/jdbc/</url>
    <content><![CDATA[<p>最近在做一些数据库相关的工作，在此系统性地整理 JDBC 相关知识。</p>
<p>JDBC（Java Database Connectivity）直译为 Java 数据库连接。JDBC 是一个 Java API，用于 Java 连接并执行数据库查询。JDBC 与数据库驱动程序一起使用就可以访问数据库。</p>
<span id="more"></span>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>JDBC 是 Java 编程中用于与数据库交互的 API（应用程序编程接口）。JDBC 的类和接口允许应用程序将用户发出的请求发送到指定的数据库。JDBC 的当前版本是 JDBC 4.3，发布于 2017 年 9 月 21 日。</p>
<h2 id="DriverManager"><a href="#DriverManager" class="headerlink" title="DriverManager"></a>DriverManager</h2><pre><code class="highlight mermaid">classDiagram
direction BT
class DriverManager</code></pre>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>作用如类名，管理数据库的驱动类，需要将驱动实例化后注册到其中，然后连接数据库的时候会尝试用驱动取连接。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>其公共方法有三类，分别是获取连接、管理查询驱动、设置超时时间，除了获取连接有些相关性不大，其他方法确实称得上是驱动管理器</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Connection getConnection(String url, java.util.Properties info)</td>
<td>获取连接</td>
</tr>
<tr>
<td>Connection getConnection(String url, String user, String password)</td>
<td>获取连接</td>
</tr>
<tr>
<td>Connection getConnection(String url)</td>
<td>获取连接</td>
</tr>
<tr>
<td>void registerDriver(java.sql.Driver driver)</td>
<td>注册驱动</td>
</tr>
<tr>
<td>void registerDriver(java.sql.Driver driver, DriverAction da)</td>
<td>注册驱动</td>
</tr>
<tr>
<td>void deregisterDriver(Driver driver)</td>
<td>注销驱动</td>
</tr>
<tr>
<td>Driver getDriver(String url)</td>
<td>获取能处理 url 的驱动</td>
</tr>
<tr>
<td>Enumeration&lt;Driver&gt; getDrivers()</td>
<td>获取所有驱动</td>
</tr>
<tr>
<td>Stream&lt;Driver&gt; drivers()</td>
<td>获取所有驱动</td>
</tr>
<tr>
<td>void setLoginTimeout(int seconds)</td>
<td>设置连接超时时间</td>
</tr>
<tr>
<td>int getLoginTimeout()</td>
<td>获取连接超时时间</td>
</tr>
</tbody></table>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>这个类比自 Java 1.1 起就存在，代码风格比较旧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理 JDBC 驱动，更推荐用 DataSource 连接数据库</span></span><br><span class="line"><span class="comment"> * 初始化时会从 jdbc.drivers 系统属性读取类名，然后用 ClassLoader加载。另一种方式是用 ServiceLoader 方式加载</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DriverManager</span> &#123;</span><br><span class="line">    <span class="comment">// 注册的驱动，只保存手动注册的驱动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CopyOnWriteArrayList&lt;DriverInfo&gt; registeredDrivers = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">loginTimeout</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 驱动初始化同步锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lockForInitDrivers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="comment">// 驱动是否已初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> driversInitialized;</span><br><span class="line">    <span class="comment">// 系统参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">JDBC_DRIVERS_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;jdbc.drivers&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 工具类防止实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DriverManager</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接，如果 url 和 properties 中的参数相同，最后生效的参数依赖于驱动的实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url  数据库 url，形式为 jdbc:subprotocol:subname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info 连接参数，至少要有 user、password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, java.util.Properties info)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url      数据库 url，形式为 jdbc:subprotocol:subname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user     用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url,</span></span><br><span class="line"><span class="params">            String user, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        java.util.<span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Properties();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span>) &#123;</span><br><span class="line">            info.put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (password != <span class="literal">null</span>) &#123;</span><br><span class="line">            info.put(<span class="string">&quot;password&quot;</span>, password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建立连接，参数为空</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 数据库 url，形式为 jdbc:subprotocol:subname</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        java.util.<span class="type">Properties</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Properties();</span><br><span class="line">        <span class="keyword">return</span> (getConnection(url, info, Reflection.getCallerClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 真正的获取连接方法，叫 doGetConnection 更合适</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url    数据库 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info   连接参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caller 调用该方法的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitiveAdapter</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">(String url, java.util.Properties info, Class&lt;?&gt; caller)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 获取 ClassLoader，用来加载外部类</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">callerCL</span> <span class="operator">=</span> caller != <span class="literal">null</span> ? caller.getClassLoader() : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (callerCL == <span class="literal">null</span> || callerCL == ClassLoader.getPlatformClassLoader()) &#123;</span><br><span class="line">            callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        ensureDriversInitialized();</span><br><span class="line">        <span class="type">SQLException</span> <span class="variable">reason</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 此处为何不用 getDriver ？</span></span><br><span class="line">        <span class="keyword">for</span> (DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// 调用者是否有权限加载驱动</span></span><br><span class="line">            <span class="keyword">if</span> (isDriverAllowed(aDriver.driver, callerCL)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 连接数据库</span></span><br><span class="line">                    <span class="type">Connection</span> <span class="variable">con</span> <span class="operator">=</span> aDriver.driver.connect(url, info);</span><br><span class="line">                    <span class="keyword">if</span> (con != <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> (con);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (reason == <span class="literal">null</span>) &#123;</span><br><span class="line">                        reason = ex;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 连接失败</span></span><br><span class="line">        <span class="keyword">if</span> (reason != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有合适的驱动</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;No suitable driver found for &quot;</span> + url, <span class="string">&quot;08001&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取能理解 url 的第一个驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url 数据库地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Driver <span class="title function_">getDriver</span><span class="params">(String url)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        ensureDriversInitialized();</span><br><span class="line">        Class&lt;?&gt; callerClass = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">for</span> (DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// 获取有权限驱动</span></span><br><span class="line">            <span class="keyword">if</span> (isDriverAllowed(aDriver.driver, callerClass)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 驱动是否能处理 url</span></span><br><span class="line">                    <span class="keyword">if</span> (aDriver.driver.acceptsURL(url)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> (aDriver.driver);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException sqe) &#123;</span><br><span class="line">                    <span class="comment">// 跳过当前驱动</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">&quot;skipping: &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;No suitable driver&quot;</span>, <span class="string">&quot;08001&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Enumeration&lt;Driver&gt; <span class="title function_">getDrivers</span><span class="params">()</span> &#123;</span><br><span class="line">        ensureDriversInitialized();</span><br><span class="line">        <span class="keyword">return</span> Collections.enumeration(getDrivers(Reflection.getCallerClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动流</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;Driver&gt; <span class="title function_">drivers</span><span class="params">()</span> &#123;</span><br><span class="line">        ensureDriversInitialized();</span><br><span class="line">        <span class="keyword">return</span> getDrivers(Reflection.getCallerClass()).stream();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callerClass 调用类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Driver&gt; <span class="title function_">getDrivers</span><span class="params">(Class&lt;?&gt; callerClass)</span> &#123;</span><br><span class="line">        List&lt;Driver&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (DriverInfo aDriver : registeredDrivers) &#123;</span><br><span class="line">            <span class="comment">// 获取有权限的驱动</span></span><br><span class="line">            <span class="keyword">if</span> (isDriverAllowed(aDriver.driver, callerClass)) &#123;</span><br><span class="line">                result.add(aDriver.driver);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">&quot;skipping: &quot;</span> + aDriver.driver.getClass().getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver 驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(java.sql.Driver driver)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        registerDriver(driver, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver 驱动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> da     注销驱动时的行为</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">registerDriver</span><span class="params">(java.sql.Driver driver, DriverAction da)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (driver != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 注册不存在的驱动</span></span><br><span class="line">            registeredDrivers.addIfAbsent(<span class="keyword">new</span> <span class="title class_">DriverInfo</span>(driver, da));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver 驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deregisterDriver</span><span class="params">(Driver driver)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">if</span> (driver == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">DriverInfo</span> <span class="variable">aDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DriverInfo</span>(driver, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lockForInitDrivers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (registeredDrivers.contains(aDriver)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDriverAllowed(driver, Reflection.getCallerClass())) &#123;</span><br><span class="line">                    <span class="type">DriverInfo</span> <span class="variable">di</span> <span class="operator">=</span> registeredDrivers.get(registeredDrivers.indexOf(aDriver));</span><br><span class="line">                    <span class="comment">// 执行注销动作</span></span><br><span class="line">                    <span class="keyword">if</span> (di.action() != <span class="literal">null</span>) &#123;</span><br><span class="line">                        di.action().deregister();</span><br><span class="line">                    &#125;</span><br><span class="line">                    registeredDrivers.remove(aDriver);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SecurityException</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                println(<span class="string">&quot;couldn&#x27;t find driver to unload&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置连接超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 0 为无限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> &#123;</span><br><span class="line">        loginTimeout = seconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (loginTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试加载驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver 驱动类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caller 调用类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加载是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDriverAllowed</span><span class="params">(Driver driver, Class&lt;?&gt; caller)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">callerCL</span> <span class="operator">=</span> caller != <span class="literal">null</span> ? caller.getClassLoader() : <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> isDriverAllowed(driver, callerCL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试加载驱动</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver 驱动类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caller 调用类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加载是否成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isDriverAllowed</span><span class="params">(Driver driver, ClassLoader classLoader)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (driver != <span class="literal">null</span>) &#123;</span><br><span class="line">            Class&lt;?&gt; aClass = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                aClass = Class.forName(driver.getClass().getName(), <span class="literal">true</span>, classLoader);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                result = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result = (aClass == driver.getClass()) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化驱动类，两种方式：ServiceLoader、ClassLoader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">ensureDriversInitialized</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (driversInitialized) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 双重检查锁，为什么还在用 synchronized？</span></span><br><span class="line">        <span class="keyword">synchronized</span> (lockForInitDrivers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (driversInitialized) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 利用 SPI 获取 Driver 实现类</span></span><br><span class="line">            ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">            Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line">            <span class="comment">// 取出类，使驱动的静态代码块运行 DriverManager.registerDriver 方法将自己实例化，注册到 DriverManager</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (driversIterator.hasNext()) &#123;</span><br><span class="line">                    driversIterator.next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                <span class="comment">// 忽略错误</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 加载 jdbc.drivers 系统属性</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">drivers</span> <span class="operator">=</span> System.getProperty(JDBC_DRIVERS_PROPERTY);</span><br><span class="line">            <span class="comment">// 加载驱动</span></span><br><span class="line">            <span class="keyword">if</span> (drivers != <span class="literal">null</span> &amp;&amp; !drivers.isEmpty()) &#123;</span><br><span class="line">                String[] driversList = drivers.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String aDriver : driversList) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Class.forName(aDriver, <span class="literal">true</span>, ClassLoader.getSystemClassLoader());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                        println(<span class="string">&quot;DriverManager.Initialize: load failed: &quot;</span> + ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            driversInitialized = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="为什么使用驱动前需要-Class-forName-com-mysql-jdbc-Driver"><a href="#为什么使用驱动前需要-Class-forName-com-mysql-jdbc-Driver" class="headerlink" title="为什么使用驱动前需要 Class.forName(&quot;com.mysql.jdbc.Driver&quot;)"></a>为什么使用驱动前需要 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code></h4><p>当年初学 Java，连接数据库第一步是 <code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>。这是为什么呢？</p>
<p>通过<code>DriverManager</code>的源代码，可以看出想要使用<code>DriverManager</code>连接数据库，要先把驱动注册到<code>DriverManager</code>。</p>
<p><code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</code>将该驱动类加载到 JVM 中，该类的静态代码块中有这么一句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">Driver</span>());</span><br></pre></td></tr></table></figure>

<p>类似的，ClickHouse 驱动的静态代码块中有这么一句：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DriverManager.registerDriver(<span class="keyword">new</span> <span class="title class_">ClickHouseDriver</span>());</span><br></pre></td></tr></table></figure>

<p>Java 在 1.6 之后添加了 SPI 机制，而 MySQL 的驱动在 5.1.6 版本后，jar 包中添加了<code>META-INF/services/java.sql.Driver</code>文件，文件内容为<code>com.mysql.jdbc.Driver</code>。只要满足 JDK 版本大于等于 1.6，驱动添加了 SPI 文件，<code>DriverManager.ensureDriversInitialized()</code>在运行的时候就会将驱动注册到<code>DriverManager</code>中。</p>
<h2 id="DataSource"><a href="#DataSource" class="headerlink" title="DataSource"></a>DataSource</h2><pre><code class="highlight mermaid">classDiagram
direction BT
class CommonDataSource &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class DataSource &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class Wrapper &#123;
&lt;&lt;Interface&gt;&gt;
&#125;

DataSource  --&gt;  CommonDataSource
DataSource  --&gt;  Wrapper</code></pre>

<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Connection getConnection()</td>
<td>获取连接</td>
</tr>
<tr>
<td>Connection getConnection(String username, String password)</td>
<td>通过用户密码获取连接</td>
</tr>
<tr>
<td>void setLoginTimeout(int seconds)</td>
<td>设置登录超时时间</td>
</tr>
<tr>
<td>int getLoginTimeout()</td>
<td>获取登录超时时间</td>
</tr>
<tr>
<td>ConnectionBuilder createConnectionBuilder()</td>
<td>创建一个 ConnectionBuilder 实例，用来分表</td>
</tr>
<tr>
<td>ShardingKeyBuilder createShardingKeyBuilder()</td>
<td>继承自 CommonDataSource，用来分表</td>
</tr>
<tr>
<td>&lt;T&gt; T unwrap(java.lang.Class&lt;T&gt; iface)</td>
<td>继承自 Wrapper，解包装成指定类</td>
</tr>
<tr>
<td>boolean isWrapperFor(java.lang.Class&lt;?&gt; iface)</td>
<td>继承自 Wrapper，是否是指定类的包装</td>
</tr>
</tbody></table>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DataSource</span> <span class="keyword">extends</span> <span class="title class_">CommonDataSource</span>, Wrapper &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Connection <span class="title function_">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置登录超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setLoginTimeout</span><span class="params">(<span class="type">int</span> seconds)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取登录超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLoginTimeout</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个 ConnectionBuilder 实例</span></span><br><span class="line"><span class="comment">     * 使用 sharding 时要使用该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ConnectionBuilder 实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">default</span> ConnectionBuilder <span class="title function_">createConnectionBuilder</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLFeatureNotSupportedException</span>(<span class="string">&quot;createConnectionBuilder not implemented&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><h4 id="HikariDataSource"><a href="#HikariDataSource" class="headerlink" title="HikariDataSource"></a>HikariDataSource</h4><pre><code class="highlight mermaid">classDiagram
direction BT
class AutoCloseable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class Closeable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class CommonDataSource &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class DataSource &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class HikariConfig
class HikariConfigMXBean &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class HikariDataSource
class Wrapper &#123;
&lt;&lt;Interface&gt;&gt;
&#125;

Closeable  --&gt;  AutoCloseable
DataSource  --&gt;  CommonDataSource
DataSource  --&gt;  Wrapper
HikariConfig  ..&gt;  HikariConfigMXBean
HikariDataSource  ..&gt;  Closeable
HikariDataSource  ..&gt;  DataSource
HikariDataSource  --&gt;  HikariConfig
</code></pre>

<h5 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h5><p>知名的数据库连接池 HikariCP 的实现类，利用 HikariPool 对连接进行缓存。</p>
<h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><p>除 DataSource 的方法外，还实现了以下方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>void setMetricRegistry(Object metricRegistry)</td>
<td>设置度量注册表</td>
</tr>
<tr>
<td>void setMetricsTrackerFactory(MetricsTrackerFactory metricsTrackerFactory)</td>
<td>设置度量追踪工厂</td>
</tr>
<tr>
<td>void setHealthCheckRegistry(Object healthCheckRegistry)</td>
<td>设置健康检查注册表</td>
</tr>
<tr>
<td>boolean isRunning()</td>
<td>连接池是否正在运行</td>
</tr>
<tr>
<td>void evictConnection(Connection connection)</td>
<td>从连接池逐出连接</td>
</tr>
<tr>
<td>void close()</td>
<td>关闭 DataSource</td>
</tr>
<tr>
<td>boolean isClosed()</td>
<td>是否被关闭</td>
</tr>
</tbody></table>
<h5 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HikariCP DataSource.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HikariDataSource</span> <span class="keyword">extends</span> <span class="title class_">HikariConfig</span> <span class="keyword">implements</span> <span class="title class_">DataSource</span>, Closeable &#123;</span><br><span class="line">    <span class="comment">// 关闭标志</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicBoolean</span> <span class="variable">isShutdown</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicBoolean</span>();</span><br><span class="line">    <span class="comment">// 优先使用的连接池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HikariPool fastPathPool;</span><br><span class="line">    <span class="comment">// 懒加载连接池</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> HikariPool pool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造器，默认配置，连接池懒加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HikariDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        fastPathPool = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定配置构造器，连接池直接实例化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration 配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HikariDataSource</span><span class="params">(HikariConfig configuration)</span> &#123;</span><br><span class="line">        <span class="comment">// 检查并复制配置</span></span><br><span class="line">        configuration.validate();</span><br><span class="line">        configuration.copyStateTo(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 实例化连接池</span></span><br><span class="line">        pool = fastPathPool = <span class="keyword">new</span> <span class="title class_">HikariPool</span>(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 密封配置，不允许修改</span></span><br><span class="line">        <span class="built_in">this</span>.seal();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 关闭了不能再使用</span></span><br><span class="line">        <span class="keyword">if</span> (isClosed()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;HikariDataSource &quot;</span> + <span class="built_in">this</span> + <span class="string">&quot; has been closed.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不需要懒加载连接池</span></span><br><span class="line">        <span class="keyword">if</span> (fastPathPool != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fastPathPool.getConnection();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 双重检查锁</span></span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">result</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                result = pool;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</span><br><span class="line">                    validate();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 创建连接池</span></span><br><span class="line">                        pool = result = <span class="keyword">new</span> <span class="title class_">HikariPool</span>(<span class="built_in">this</span>);</span><br><span class="line">                        <span class="comment">// 密封配置，不允许修改</span></span><br><span class="line">                        <span class="built_in">this</span>.seal();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (PoolInitializationException pie) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> pie;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取连接</span></span><br><span class="line">        <span class="keyword">return</span> result.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过用户密码获取连接，不支持</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(String username, String password)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLFeatureNotSupportedException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定类型未包装的 DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">unwrap</span><span class="params">(Class&lt;T&gt; iface)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 当前实例是指定类型</span></span><br><span class="line">        <span class="keyword">if</span> (iface.isInstance(<span class="built_in">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 连接池中的 DataSource</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">DataSource</span> <span class="variable">unwrappedDataSource</span> <span class="operator">=</span> p.getUnwrappedDataSource();</span><br><span class="line">            <span class="keyword">if</span> (iface.isInstance(unwrappedDataSource)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) unwrappedDataSource;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (unwrappedDataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 再解包装一次</span></span><br><span class="line">                <span class="keyword">return</span> unwrappedDataSource.unwrap(iface);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;Wrapped DataSource is not an instance of &quot;</span> + iface);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是指定类型包装后的 DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isWrapperFor</span><span class="params">(Class&lt;?&gt; iface)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 同 unwrap</span></span><br><span class="line">        <span class="keyword">if</span> (iface.isInstance(<span class="built_in">this</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">DataSource</span> <span class="variable">unwrappedDataSource</span> <span class="operator">=</span> p.getUnwrappedDataSource();</span><br><span class="line">            <span class="keyword">if</span> (iface.isInstance(unwrappedDataSource)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (unwrappedDataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> unwrappedDataSource.isWrapperFor(iface);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置度量注册表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMetricRegistry</span><span class="params">(Object metricRegistry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAlreadySet</span> <span class="operator">=</span> getMetricRegistry() != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 设置配置的度量注册表</span></span><br><span class="line">        <span class="built_in">super</span>.setMetricRegistry(metricRegistry);</span><br><span class="line"></span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAlreadySet) &#123;</span><br><span class="line">                <span class="comment">// 不能重复设置</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;MetricRegistry can only be set one time&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 设置连接池的度量注册表</span></span><br><span class="line">                p.setMetricRegistry(<span class="built_in">super</span>.getMetricRegistry());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置度量追踪工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMetricsTrackerFactory</span><span class="params">(MetricsTrackerFactory metricsTrackerFactory)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAlreadySet</span> <span class="operator">=</span> getMetricsTrackerFactory() != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 设置配置的度量追踪工厂</span></span><br><span class="line">        <span class="built_in">super</span>.setMetricsTrackerFactory(metricsTrackerFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAlreadySet) &#123;</span><br><span class="line">                <span class="comment">// 不能重复设置</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;MetricsTrackerFactory can only be set one time&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 设置连接池的度量追踪工厂</span></span><br><span class="line">                p.setMetricsTrackerFactory(<span class="built_in">super</span>.getMetricsTrackerFactory());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置健康检查注册表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHealthCheckRegistry</span><span class="params">(Object healthCheckRegistry)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isAlreadySet</span> <span class="operator">=</span> getHealthCheckRegistry() != <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 设置配置的健康检查注册表</span></span><br><span class="line">        <span class="built_in">super</span>.setHealthCheckRegistry(healthCheckRegistry);</span><br><span class="line"></span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isAlreadySet) &#123;</span><br><span class="line">                <span class="comment">// 不能重复设置</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;HealthCheckRegistry can only be set one time&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 设置连接池的健康检查注册表</span></span><br><span class="line">                p.setHealthCheckRegistry(<span class="built_in">super</span>.getHealthCheckRegistry());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接池是否正在运行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isRunning</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pool != <span class="literal">null</span> &amp;&amp; pool.poolState == POOL_NORMAL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从连接池逐出连接。如果连接正在使用，将来会被逐出。如果连接在等待状态，立刻关闭并逐出。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">evictConnection</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        HikariPool p;</span><br><span class="line">        <span class="keyword">if</span> (!isClosed() &amp;&amp; (p = pool) != <span class="literal">null</span> &amp;&amp; connection.getClass().getName().startsWith(<span class="string">&quot;com.zaxxer.hikari&quot;</span>)) &#123;</span><br><span class="line">            p.evictConnection(connection);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 DataSource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 防止多线程同时关闭</span></span><br><span class="line">        <span class="keyword">if</span> (isShutdown.getAndSet(<span class="literal">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭连接池</span></span><br><span class="line">        <span class="type">HikariPool</span> <span class="variable">p</span> <span class="operator">=</span> pool;</span><br><span class="line">        <span class="keyword">if</span> (p != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                p.shutdown();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                Thread.currentThread().interrupt();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HikariDataSource 是否被关闭</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isShutdown.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="HikariPool"><a href="#HikariPool" class="headerlink" title="HikariPool"></a>HikariPool</h4><pre><code class="highlight mermaid">classDiagram
direction BT
class HikariPool
class HikariPoolMXBean &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class PoolBase

HikariPool  ..&gt;  HikariPoolMXBean
HikariPool  --&gt;  PoolBase</code></pre>

<h5 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>读源码</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 字符比较数字格式异常</title>
    <url>/2023/mybatis-char-compare/</url>
    <content><![CDATA[<p>在使用<code>Mybatis</code>进行字符比较时遇到了<code>java.lang.NumberFormatException</code>异常。</p>
<p><code>Mybatis</code>版本为<code>3.5.14</code>。</p>
<span id="more"></span>

<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p><code>mapper</code>文件部分定义如下，<code>level</code>为字符串参数，值为<code>&quot;a&quot;</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;find&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;tk.lsq27.imports.User&quot;</span>&gt;</span></span><br><span class="line">    select id, str, num1, num2 from excel</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;level == &#x27;a&#x27;&quot;</span>&gt;</span></span><br><span class="line">            num1 &gt;= 10</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="错误堆栈"><a href="#错误堆栈" class="headerlink" title="错误堆栈"></a>错误堆栈</h3><p>从错误堆栈里可以看到<code>Mybatis</code>的<code>Mapper</code>执行流程，在其他文章会进行分析。</p>
<p>可以看到，问题出现在 <code>Ognl</code> 相关类中，在转换<code>String</code>为<code>Double</code>时报了<code>NumberFormatException</code>异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: java.lang.NumberFormatException: For input string: &quot;a&quot;</span><br><span class="line">	at sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:2043) ~[na:1.8.0_382]</span><br><span class="line">	at sun.misc.FloatingDecimal.parseDouble(FloatingDecimal.java:110) ~[na:1.8.0_382]</span><br><span class="line">	at java.lang.Double.parseDouble(Double.java:538) ~[na:1.8.0_382]</span><br><span class="line">	at org.apache.ibatis.ognl.OgnlOps.doubleValue(OgnlOps.java:253) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.OgnlOps.compareWithConversion(OgnlOps.java:104) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.OgnlOps.isEqual(OgnlOps.java:153) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.OgnlOps.equal(OgnlOps.java:814) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.ASTEq.getValueBody(ASTEq.java:52) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.SimpleNode.evaluateGetValueBody(SimpleNode.java:212) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.SimpleNode.getValue(SimpleNode.java:258) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:586) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.ognl.Ognl.getValue(Ognl.java:550) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.OgnlCache.getValue(OgnlCache.java:46) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.ExpressionEvaluator.evaluateBoolean(ExpressionEvaluator.java:32) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.IfSqlNode.apply(IfSqlNode.java:34) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at java.util.ArrayList.forEach(ArrayList.java:1259) ~[na:1.8.0_382]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.TrimSqlNode.apply(TrimSqlNode.java:58) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.lambda$apply$0(MixedSqlNode.java:32) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at java.util.ArrayList.forEach(ArrayList.java:1259) ~[na:1.8.0_382]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.MixedSqlNode.apply(MixedSqlNode.java:32) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.scripting.xmltags.DynamicSqlSource.getBoundSql(DynamicSqlSource.java:39) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.mapping.MappedStatement.getBoundSql(MappedStatement.java:320) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:88) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_382]</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_382]</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_382]</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_382]</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-2.1.2.jar:2.1.2]</span><br><span class="line">	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-2.1.2.jar:2.1.2]</span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod.executeForMany(MapperMethod.java:147) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:80) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:141) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:86) ~[mybatis-3.5.14.jar:3.5.14]</span><br><span class="line">	at com.sun.proxy.$Proxy48.find(Unknown Source) ~[na:na]</span><br></pre></td></tr></table></figure>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p><code>Ognl</code>在解析<code>&quot;a&quot; == &#39;a&#39;</code>时，在参与比较的两值至少有一个为数字时，会将两值都转换为<code>Double</code>进行比较。相关代码位于<code>OgnlOps.compareWithConversion</code>，函数流程如下图所示</p>
<pre><code class="highlight mermaid">flowchart
    A([&quot;int t1 = getNumericType(v1)
    int t2 = getNumericType(v2)
    int type = getNumericType(t1, t2, true)&quot;]) --&gt; B&#123;&quot;type == 10 &amp;&amp;
    (t1 != 10 || t2 != 10)&quot;&#125;
    B --&gt;|是| C(&quot;double dv1 = doubleValue(v1)
    double dv2 = doubleValue(v2)&quot;)
    C --&gt; D&#123;&quot;dv1 == dv2&quot;&#125;
    D --&gt;|是| E([返回 0])
    D --&gt;|否| F&#123;&quot;dv1 &lt; dv2&quot;&#125;
    F --&gt;|是| G([返回 -1])
    F --&gt;|否| H([返回 1])</code></pre>

<p>其中<code>OgnlOps.getNumericType</code>流程如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNumericType</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> value.getClass();</span><br><span class="line">        <span class="keyword">if</span> (c == Integer.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Double.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Boolean.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Byte.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Character.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Short.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Long.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == Float.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == BigInteger.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == BigDecimal.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>OgnlOps.doubleValue</code>流程如下</p>
<pre><code class="highlight mermaid">flowchart
    START([开始]) --&gt; A[/输入 value/]
    A --&gt; B&#123;&quot;value == null&quot;&#125;
    B --&gt;|是| C([返回 0.0])
    B --&gt;|否| D&#123;&quot;value 是 Number 子类&quot;&#125;
    D --&gt;|是| E([转换为 double 返回])
    D --&gt;|否| F&#123;&quot;value 是 Boolean&quot;&#125;
    F --&gt;|是| G([&quot;返回 (Boolean)value ? 1.0 : 0.0&quot;])
    F --&gt;|否| H&#123;&quot;value 是 Character&quot;&#125;
    H --&gt;|是| I([&quot;返回 (double)(Character)value&quot;])
    H --&gt;|否| J([&quot;s.length() == 0 ? 0.0 : Double.parseDouble(s)&quot;])</code></pre>

<p>两个参数均为非数字类型，此时调用<code>Object.equals</code>或<code>Comparable.compareTo</code>（两个参数需类型相同并实现<code>Comparable</code>接口）比较是否相等</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>固定第一个值为字符串，变化第二个值可以得到如下表格</p>
<table>
<thead>
<tr>
<th>Ognl</th>
<th>Java</th>
<th>参与比较时的值</th>
<th>比较方法</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>‘’</td>
<td>“”</td>
<td>“”</td>
<td><code>Comparable.compareTo</code></td>
<td></td>
</tr>
<tr>
<td>“”</td>
<td>“”</td>
<td>“”</td>
<td><code>Comparable.compareTo</code></td>
<td></td>
</tr>
<tr>
<td>“1”</td>
<td>“1”</td>
<td>“1”</td>
<td><code>Comparable.compareTo</code></td>
<td></td>
</tr>
<tr>
<td>‘12’</td>
<td>“12”</td>
<td>“12”</td>
<td><code>Comparable.compareTo</code></td>
<td></td>
</tr>
<tr>
<td>‘1’</td>
<td>‘1’</td>
<td>49.0</td>
<td>&#x3D;&#x3D;</td>
<td>此时两个值强转为 double，可能会抛异常</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>&#x3D;&#x3D;</td>
<td>此时两个值强转为 double，可能会抛异常</td>
</tr>
</tbody></table>
<p>结合上面的源码解析，有如下结论</p>
<ul>
<li>两个参数有至少有一个为数字类型时，就会强转为<code>double</code>进行比较</li>
<li><code>&#39;&#39;</code>是空字符串</li>
<li>‘x’是字符，是数字的一种</li>
</ul>
<p>解决方式显而易见，总是使用<code>&quot;</code>包裹字符，让<code>Ognl</code>将其处理为字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test = &#x27;level == &quot;a&quot;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>找到<code>Ognl</code>这样设计的原因。</p>
]]></content>
      <categories>
        <category>解决问题</category>
      </categories>
      <tags>
        <tag>生产问题</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>读 Mybatis 源码（Spring）</title>
    <url>/2024/mybatis-spring/</url>
    <content><![CDATA[<p>作为<code>Java</code>最流行的框架<code>Spring</code>，<code>Mybatis</code>也为其提供了支持。</p>
<p>由于<code>SqlSession</code>不是线程安全的，所以没有办法将其作为单例注册到<code>Spring</code>容器。即使作为多例注册到<code>Spring</code>，也无法享受到<code>Spring</code>方便的声明式事务管理。</p>
<p>所以官方引入了新的<code>SqlSessionTemplate</code>。它是线程安全、<code>Spring</code>管理的<code>SqlSession</code>，与<code>Spring</code>事务管理配合使用，以确保实际使用的<code>SqlSession</code>是与当前<code>Spring</code>事务关联的<code>SqlSession</code>。此外，它还管理会话生命周期，包括根据<code>Spring</code>事务配置根据需要关闭、提交或回滚会话。</p>
<span id="more"></span>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>该模板需要 SqlSessionFactory 来创建 SqlSessions，并作为构造函数参数传递。它也可以构造为指示要使用的执行器类型，否则，将使用会话工厂中定义的默认执行器类型。<br>该模板将 MyBatis PersistenceExceptions 转换为未经检查的 DataAccessExceptions，默认使用 MyBatisExceptionTranslator。<br>由于<code>SqlSessionTemplate</code>是线程安全的，因此所有 DAO 都可以共享单个实例;这样做也应该可以节省少量内存。</p>
<pre><code class="highlight mermaid">classDiagram
direction BT

class AutoCloseable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class Closeable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class DisposableBean &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class SqlSession &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class SqlSessionTemplate

Closeable  --&gt;  AutoCloseable
SqlSession  --&gt;  Closeable
SqlSessionTemplate  ..&gt;  DisposableBean
SqlSessionTemplate  ..&gt;  SqlSession</code></pre>

<p><code>SqlSessionTemplate</code>从<code>Spring</code>中获取用以执行<code>SQL</code>的<code>SqlSession</code>的流程如下图所示</p>
<pre><code class="highlight mermaid">flowchart
    A([从 TransactionSynchronizationManager
    获取 SqlSession]) --&gt; B&#123;SqlSession == null&#125;
    B --&gt;|是| C(sessionFactory.openSession)
    C --&gt; E&#123;TransactionSynchronizationManager
    事务同步&#125;
    E --&gt;|是| F&#123;Mybatis 的事务工厂配置为
    SpringManagedTransactionFactory&#125;
    F --&gt;|是| G(将 SqlSession 绑定到当前线程)
    F --&gt;|否| H&#123;当前线程绑定了
    Mybatis 的 DataSource&#125;
    H --&gt;|是| I(抛出异常)
    H --&gt;|否| J(打印 debug 日志)
    E --&gt;|否| J
    B --&gt;|否| K([返回 SqlSession])
    G --&gt; K
    J --&gt; K</code></pre>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">direction BT</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DaoSupport</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FactoryBean</span>~T~ &#123;</span><br><span class="line">&lt;&lt;Interface&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">&lt;&lt;Interface&gt;&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapperFactoryBean</span>~T~</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SqlSessionDaoSupport</span></span><br><span class="line"></span><br><span class="line">DaoSupport  ..&gt;  InitializingBean</span><br><span class="line">MapperFactoryBean~T~  ..&gt;  FactoryBean~T~</span><br><span class="line">MapperFactoryBean~T~  --&gt;  SqlSessionDaoSupport</span><br><span class="line">SqlSessionDaoSupport  --&gt;  DaoSupport</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mybatis.org/mybatis-3/zh_CN/java-api.html">mybatis – MyBatis 3 | Java API</a></li>
</ul>
]]></content>
      <categories>
        <category>读源码</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库分页排序数据重复</title>
    <url>/2024/paging-sorting-data-duplication/</url>
    <content><![CDATA[<p>在需求测试中碰到了分页排序数据重复的问题，在翻页时发现部分数据在多页中出现。初次碰到感觉该问题比较反直觉，排序和分页放在一起用时，在我看来应该是先排序再分页，排序顺序确定的情况下，分页每次取部分数据，是不应该出现数据重复出现在不同页的情况的。</p>
<span id="more"></span>

<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>开发环境用的是 <code>Oracle</code>，在自己的电脑用 <code>MySQL</code> 也可以复现问题，<code>MySQL</code> 版本采用 8.2.0。</p>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>新建如下表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> test(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>插入如下数据</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>3</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
</tr>
<tr>
<td>7</td>
<td>3</td>
</tr>
<tr>
<td>8</td>
<td>2</td>
</tr>
<tr>
<td>9</td>
<td>3</td>
</tr>
<tr>
<td>10</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>现在进行分页查询，每页两条数据，查询第一页数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> name limit <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>1</td>
</tr>
</tbody></table>
<p>查询第二页数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> name limit <span class="number">2</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>预期的结果为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>5</td>
<td>1</td>
</tr>
<tr>
<td>x</td>
<td>2</td>
</tr>
</tbody></table>
<p>实际结果如下</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
</tbody></table>
<p>可以看到，id 为 10 的数据在两次分页查询中出现了两次，id 为 5 的数据从未出现。通过分页查询，用户永远也无法看到 id 为 5 的数据。</p>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>查询相关资料，MySQL 的文档其实说明了原因<br><a href="https://dev.mysql.com/doc/refman/8.3/en/limit-optimization.html">MySQL :: MySQL 8.3 Reference Manual :: 8.2.1.19 LIMIT Query Optimization</a></p>
<blockquote>
<p>If multiple rows have identical values in the <code>ORDER BY</code> columns, the server is free to return those rows in any order, and may do so differently depending on the overall execution plan. In other words, the sort order of those rows is nondeterministic with respect to the nonordered columns.</p>
<p>One factor that affects the execution plan is <code>LIMIT</code>, so an <code>ORDER BY</code> query with and without <code>LIMIT</code> may return rows in different orders.</p>
</blockquote>
<p>简言之，<code>ORDER BY</code> 的列如果值相同，数据库不保证返回行的顺序，结果受整体执行计划影响。</p>
<p>那么文章开头问题的原因显而易见，<code>LIMIT</code>改变了执行计划，<code>ORDER BY</code> 受此影响，对不同的<code>LIMIT</code>参数返回了顺序不同的结果行，通过以下<code>SQL</code>可以证实</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> name limit <span class="number">0</span>,<span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p>执行结果为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
</tbody></table>
<p>从第 3 行起取 2 行结果，与查询第二页数据结果一致。</p>
<p><strong><code>ORDER BY</code> 的结果顺序受执行计划影响， <code>LIMIT</code> 改变了执行计划，导致了分页排序数据重复问题的发生。</strong></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p><code>MySQL</code>文档给的解决方案是在<code>ORDER BY</code> 的字段中增加不含重复值的列，如<code>id</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> name, id limit <span class="number">0</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">order</span> <span class="keyword">by</span> name, id limit <span class="number">2</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<p>结果为</p>
<table>
<thead>
<tr>
<th>id</th>
<th>name</th>
</tr>
</thead>
<tbody><tr>
<td>10</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
</tr>
</tbody></table>
<p>问题解决。</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>执行文中的<code>SQL</code>时，执行计划中均出现了 <code>Using filesort</code>，之后另起一篇分析一下<code>MySQL</code>的排序算法，找到本文问题的代码根源。</p>
<table>
<thead>
<tr>
<th>id</th>
<th>select_type</th>
<th>table</th>
<th>partitions</th>
<th>type</th>
<th>possible_keys</th>
<th>key</th>
<th>key_len</th>
<th>ref</th>
<th>rows</th>
<th>filtered</th>
<th>Extra</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>SIMPLE</td>
<td>test</td>
<td></td>
<td>ALL</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td>10</td>
<td>100.0</td>
<td>Using filesort</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>解决问题</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>生产问题</tag>
      </tags>
  </entry>
  <entry>
    <title>读 Mybatis 源码（一）</title>
    <url>/2024/mybatis-1/</url>
    <content><![CDATA[<p>作为中国最流行的<code>ORM</code>框架，<code>Mybatis</code>的设计很经典。我打算分几个模块阅读其源代码。</p>
<p><code>session</code> 模块位于<code>org.apache.ibatis.session</code>包下，此模块的提供了用户使用 Mybatis 的主要接口和配置类。主要的类和接口有</p>
<ul>
<li>SqlSessionFactoryBuilder</li>
<li>SqlSessionFactory</li>
<li>SqlSession</li>
<li>Configuration</li>
</ul>
<span id="more"></span>

<h2 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>创建 <code>SqlSessionFactory</code>，支持 <code>XML</code>配置或代码配置。创建<code>SqlSessionFactory</code>时可以控制的参数有：环境名称，属性。环境名称决定加载哪种环境，包括数据源和事务管理器。属性会被 <code>MyBatis</code> 加载，并在配置中使用，可以用 ${属性名} 形式引用配置值。</p>
<p>简单的示例如下：</p>
<ul>
<li>使用<code>XML</code>进行配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span> <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;production&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;MANAGED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;JNDI&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream, <span class="string">&quot;development&quot;</span>, System.getProperties());</span><br></pre></td></tr></table></figure>

<ul>
<li>使用代码进行配置</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(driver, url, System.getProperties());</span><br><span class="line"><span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransactionFactory</span>();</span><br><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(environment);</span><br><span class="line">configuration.addMapper(BlogMapper.class);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(configuration);</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>SqlSessionFactoryBuilder</code> 的方法有如下三类</p>
<ul>
<li>从字符流创建<code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(Reader reader)</td>
</tr>
<tr>
<td>build(Reader reader, String environment)</td>
</tr>
<tr>
<td>build(Reader reader, Properties properties)</td>
</tr>
<tr>
<td>build(Reader reader, String environment, Properties properties)</td>
</tr>
</tbody></table>
<p>最终通过<code>build(Reader reader, String environment, Properties properties)</code>解析<code>XML</code>，调用<code>build(Configuration config)</code>。</p>
<ul>
<li>从字节流创建<code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(InputStream inputStream)</td>
</tr>
<tr>
<td>build(InputStream inputStream, String environment)</td>
</tr>
<tr>
<td>build(InputStream inputStream, Properties properties)</td>
</tr>
<tr>
<td>build(InputStream inputStream, String environment, Properties properties)</td>
</tr>
</tbody></table>
<p>最终通过<code>build(InputStream inputStream, String environment, Properties properties)</code>解析<code>XML</code>，调用<code>build(Configuration config)</code>。</p>
<ul>
<li>通过 <code>Configuration</code> 创建 <code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(Configuration config)</td>
</tr>
</tbody></table>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置，创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionFactoryBuilder</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字符流创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reader      字符流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> environment 环境名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties  属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(reader, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, String environment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(reader, environment, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, Properties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(reader, <span class="literal">null</span>, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Reader reader, String environment, Properties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析 XML 文件，选择合适的环境，替换属性</span></span><br><span class="line">            <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(reader, environment, properties);</span><br><span class="line">            <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error building SqlSession.&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (reader != <span class="literal">null</span>) &#123;</span><br><span class="line">                    reader.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从字节流创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 字节流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> environment 环境名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> properties  属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(inputStream, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream, String environment)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(inputStream, environment, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream, Properties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> build(inputStream, <span class="literal">null</span>, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 解析 XML 文件，选择合适的环境，替换属性</span></span><br><span class="line">            <span class="type">XMLConfigBuilder</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLConfigBuilder</span>(inputStream, environment, properties);</span><br><span class="line">            <span class="keyword">return</span> build(parser.parse());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error building SqlSession.&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">                    inputStream.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据配置创建 DefaultSqlSessionFactory</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> config Configuration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactory <span class="title function_">build</span><span class="params">(Configuration config)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSessionFactory</span>(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h2><pre><code class="highlight mermaid">classDiagram
direction BT

class DefaultSqlSessionFactory
class SqlSessionFactory &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class SqlSessionManager

DefaultSqlSessionFactory  ..&gt;  SqlSessionFactory
SqlSessionManager  ..&gt;  SqlSessionFactory</code></pre>

<h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>根据配置创建 <code>SqlSession</code>，需要 <code>DataSource</code> 或<code>Connection</code>。创建<code>SqlSession</code>时可以控制的参数有：事务等级、自动提交、执行器类型。<br>默认的 openSession() 方法会创建具备如下特性的 SqlSession：</p>
<ul>
<li>事务作用域将会开启（不自动提交）。</li>
<li>从当前环境的 <code>DataSource</code> 实例中获取 <code>Connection</code> 对象。</li>
<li>事务隔离级别将会使用驱动或数据源的默认设置。</li>
<li>预处理语句不会被复用，也不会批量处理更新。</li>
</ul>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p><code>SqlSessionFactory</code> 的方法有如下三类</p>
<ul>
<li>从 <code>DataSource</code> 打开会话</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>openSession()</td>
</tr>
<tr>
<td>openSession(boolean autoCommit)</td>
</tr>
<tr>
<td>openSession(TransactionIsolationLevel level)</td>
</tr>
<tr>
<td>openSession(ExecutorType execType)</td>
</tr>
<tr>
<td>openSession(ExecutorType execType, boolean autoCommit)</td>
</tr>
<tr>
<td>openSession(ExecutorType execType, TransactionIsolationLevel level)</td>
</tr>
</tbody></table>
<p><mark>事务等级和自动提交的设置是互斥的，打开自动提交等同于关闭事务支持，默认关闭自动提交</mark></p>
<ul>
<li>从 <code>Connection</code> 打开会话</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>openSession(Connection connection)</td>
</tr>
<tr>
<td>openSession(ExecutorType execType, Connection connection)</td>
</tr>
</tbody></table>
<p><mark>Connection 已包含事务等级、自动提交信息，所以额外的参数只有执行器类型</mark></p>
<ul>
<li>获取配置</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>getConfiguration()</td>
</tr>
</tbody></table>
<h3 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession 工厂接口，可以从 Connection 或 DataSource 创建 SqlSession</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSessionFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 DataSource 打开会话，事务等级和自动提交的设置是互斥的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level      事务等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit 自动提交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(TransactionIsolationLevel level)</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType)</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, <span class="type">boolean</span> autoCommit)</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 Connection 打开会话，Connection 已包含事务等级、自动提交信息，只需执行器类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">    SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, Connection connection)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取创建 SqlSessionFactory 的配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    Configuration <span class="title function_">getConfiguration</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><h4 id="DefaultSqlSessionFactory"><a href="#DefaultSqlSessionFactory" class="headerlink" title="DefaultSqlSessionFactory"></a>DefaultSqlSessionFactory</h4><p>默认实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的 SqlSessionFactory 实现，可以从 Connection 或 DataSource 创建 DefaultSqlSession</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title class_">SqlSessionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultSqlSessionFactory</span><span class="params">(Configuration configuration)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configuration = configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 DataSource 打开会话，事务等级和自动提交的设置是互斥的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level      事务等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit 自动提交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), <span class="literal">null</span>, autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(execType, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(TransactionIsolationLevel level)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(configuration.getDefaultExecutorType(), level, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(execType, level, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromDataSource(execType, <span class="literal">null</span>, autoCommit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 Connection 打开会话，Connection 已包含事务等级、自动提交信息，只需执行器类型</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromConnection(configuration.getDefaultExecutorType(), connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">(ExecutorType execType, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> openSessionFromConnection(execType, connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Configuration</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Configuration <span class="title function_">getConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> configuration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 DataSource 打开会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> level      事务等级</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit 自动提交</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level,</span></span><br><span class="line"><span class="params">            <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取环境，获取事务工厂，新建事务，新建执行器，最后实例化 DefaultSqlSession</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">            tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 Connection 打开会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> execType   执行器类型，默认为 SIMPLE</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> DefaultSqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> SqlSession <span class="title function_">openSessionFromConnection</span><span class="params">(ExecutorType execType, Connection connection)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> autoCommit;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                autoCommit = connection.getAutoCommit();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// Failover to true, as most poor drivers</span></span><br><span class="line">                <span class="comment">// or databases won&#x27;t support transactions</span></span><br><span class="line">                autoCommit = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取环境，获取事务工厂，新建事务，新建执行器，最后实例化 DefaultSqlSession</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> configuration.getEnvironment();</span><br><span class="line">            <span class="keyword">final</span> <span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Transaction</span> <span class="variable">tx</span> <span class="operator">=</span> transactionFactory.newTransaction(connection);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Executor</span> <span class="variable">executor</span> <span class="operator">=</span> configuration.newExecutor(tx, execType);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultSqlSession</span>(configuration, executor, autoCommit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error opening session.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从环境获取事务工厂，没有就实例化一个 ManagedTransactionFactory</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> environment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> TransactionFactory <span class="title function_">getTransactionFactoryFromEnvironment</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (environment == <span class="literal">null</span> || environment.getTransactionFactory() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ManagedTransactionFactory</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> environment.getTransactionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭事务，只用于从 DataSource 打开会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeTransaction</span><span class="params">(Transaction tx)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tx != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                tx.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SqlSessionManager"><a href="#SqlSessionManager" class="headerlink" title="SqlSessionManager"></a>SqlSessionManager</h4><p>该类同时实现了<code>SqlSession</code>接口且主要作为<code>SqlSession</code>使用，见<code>SqlSession</code>章节。</p>
<h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><pre><code class="highlight mermaid">classDiagram
direction BT

class AutoCloseable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class Closeable &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class DefaultSqlSession
class SqlSession &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class SqlSessionManager
class SqlSessionTemplate

Closeable  --&gt;  AutoCloseable
DefaultSqlSession  ..&gt;  SqlSession
SqlSession  --&gt;  Closeable
SqlSessionManager  ..&gt;  SqlSession
SqlSessionTemplate  ..&gt;  SqlSession</code></pre>

<h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><p>在使用 <code>Mybatis</code>时，最重要的类莫过于 <code>SqlSession</code>。通过该接口中的操作，开发者可以执行查增改删的 <code>Statement</code> 并获取多种类型的结果、执行批量、管理事务、管理会话、获取 Mapper。</p>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><p>SqlSession 的方法有如下几类</p>
<ul>
<li>增删查改</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>selectOne</td>
<td>获取单行数据</td>
</tr>
<tr>
<td>selectList</td>
<td>获取列表数据</td>
</tr>
<tr>
<td>selectMap</td>
<td>获取 Map 数据</td>
</tr>
<tr>
<td>selectCursor</td>
<td>获取游标数据</td>
</tr>
<tr>
<td>select</td>
<td>获取并处理每行数据</td>
</tr>
<tr>
<td>insert</td>
<td>插入数据</td>
</tr>
<tr>
<td>update</td>
<td>更新数据</td>
</tr>
<tr>
<td>delete</td>
<td>删除数据</td>
</tr>
</tbody></table>
<ul>
<li>事务和批量操作</li>
</ul>
<table>
<thead>
<tr>
<th>方法命</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>commit</td>
<td>执行缓存在 JDBC 驱动类中的批量更新语句并提交事务</td>
</tr>
<tr>
<td>rollback</td>
<td>清除缓存在 JDBC 驱动类中的批量更新语句并回滚事务</td>
</tr>
<tr>
<td>flushStatements</td>
<td>将  <code>ExecutorType</code>  设置为  <code>ExecutorType.BATCH</code>  时，使用这个方法执行缓存在 JDBC 驱动类中的批量更新语句</td>
</tr>
</tbody></table>
<ul>
<li>关闭会话</li>
</ul>
<table>
<thead>
<tr>
<th>方法命</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>close</td>
<td>关闭会话</td>
</tr>
</tbody></table>
<p>任何打开的 <code>session</code>，都要保证被妥善关闭。最佳代码模式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sqlSessionFactory.openSession()) &#123;</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">    session.insert(...);</span><br><span class="line">    session.update(...);</span><br><span class="line">    session.delete(...);</span><br><span class="line">    session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭会话</li>
</ul>
<table>
<thead>
<tr>
<th>方法命</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>close</td>
<td>关闭会话</td>
</tr>
<tr>
<td>clearCache</td>
<td>清理本地会话缓存</td>
</tr>
<tr>
<td>getConfiguration</td>
<td>获取当前配置</td>
</tr>
<tr>
<td>getConnection</td>
<td>获取内部数据库连接</td>
</tr>
</tbody></table>
<ul>
<li>获取 Mapper</li>
</ul>
<table>
<thead>
<tr>
<th>方法命</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>getMapper</td>
<td>获取 Mapper</td>
</tr>
</tbody></table>
<h3 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mybatis 的主要接口，通过该接口执行命令，获取 mapper，管理事务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SqlSession</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单行数据映射的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;       返回对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement 唯一定位需要执行的 statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单行数据映射的对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter statement 的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多行数据映射的对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt; 列表元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射的对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多行数据映射的对象列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射的对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多行数据映射的对象列表，分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowBounds 分页参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 映射的对象列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 selectList 的基础上，以 mapKey 属性为 key，将 List 转换为 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt;    返回的 Map 的 key 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt;    返回的 Map 的 value 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mapKey 作为 key 的属性名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, String mapKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 selectList 的基础上，以 mapKey 属性为 key，将 List 转换为 Map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, Object parameter, String mapKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 selectList 的基础上，以 mapKey 属性为 key，将 List 转换为 Map，分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用游标对 selectList 结果懒加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 游标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用游标对 selectList 结果懒加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 游标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用游标对 selectList 结果懒加载，分页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 游标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 ResultHandler 对每行映射的对象进行处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 处理每行对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, ResultHandler handler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 ResultHandler 对每行映射的对象进行处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, Object parameter, ResultHandler handler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 ResultHandler 对每行映射的对象进行处理，分页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行插入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute an insert statement with the given parameter object. Any generated</span></span><br><span class="line"><span class="comment">     * autoincrement values or selectKey</span></span><br><span class="line"><span class="comment">     * entries will modify the given parameter object properties. Only the number of</span></span><br><span class="line"><span class="comment">     * rows affected will be returned.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 插入的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行更新</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新 batch statements 并提交数据库连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新 batch statements 并提交数据库连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> force 强制连接提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略等待的 batch statements，回滚连接。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略等待的 batch statements，回滚连接。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> force 强制连接回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> force)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新批量statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 更新记录的 batchResult list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 3.0.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清除本地会话缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Configuration <span class="title function_">getConfiguration</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 mapper</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;  mapper 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type mapper 接口类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 绑定到当前 SqlSession 的 mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取内部的数据库连接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Connection <span class="title function_">getConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><h4 id="DefaultSqlSession"><a href="#DefaultSqlSession" class="headerlink" title="DefaultSqlSession"></a>DefaultSqlSession</h4><p>默认实现，不是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession 默认实现，不是线程安全的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title class_">SqlSession</span> &#123;</span><br><span class="line">    <span class="comment">// 配置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line">    <span class="comment">// 执行器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line">    <span class="comment">// 自动提交</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> autoCommit;</span><br><span class="line">    <span class="comment">// 是否有脏数据，调用 insert、update 或 delete 会置为 true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> dirty;</span><br><span class="line">    <span class="comment">// 保存游标，此处何时回收？</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Cursor&lt;?&gt;&gt; cursorList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration 配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executor      执行器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> autoCommit    自动提交</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultSqlSession</span><span class="params">(Configuration configuration, Executor executor, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configuration = configuration;</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">        <span class="built_in">this</span>.dirty = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">this</span>.autoCommit = autoCommit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造器，默认不自动提交</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> configuration 配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executor      执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DefaultSqlSession</span><span class="params">(Configuration configuration, Executor executor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(configuration, executor, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement, Object parameter)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询列表，如果列表很大此处会出现性能问题</span></span><br><span class="line">        List&lt;T&gt; list = <span class="built_in">this</span>.selectList(statement, parameter);</span><br><span class="line">        <span class="comment">// 只有一条就返回</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> list.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果超出一条会抛异常，零条返回 null</span></span><br><span class="line">        <span class="keyword">if</span> (list.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TooManyResultsException</span>(</span><br><span class="line">                    <span class="string">&quot;Expected one result (or null) to be returned by selectOne(), but found: &quot;</span> + list.size());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span> &#123;</span><br><span class="line">        <span class="comment">// 查询列表</span></span><br><span class="line">        <span class="keyword">final</span> List&lt;? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; list = selectList(statement, parameter, rowBounds);</span><br><span class="line">        <span class="keyword">final</span> DefaultMapResultHandler&lt;K, V&gt; mapResultHandler = <span class="keyword">new</span> <span class="title class_">DefaultMapResultHandler</span>&lt;&gt;(mapKey,</span><br><span class="line">                configuration.getObjectFactory(), configuration.getObjectWrapperFactory(),</span><br><span class="line">                configuration.getReflectorFactory());</span><br><span class="line">        <span class="keyword">final</span> DefaultResultContext&lt;V&gt; context = <span class="keyword">new</span> <span class="title class_">DefaultResultContext</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (V o : list) &#123;</span><br><span class="line">            context.nextResultObject(o);</span><br><span class="line">            mapResultHandler.handleResult(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapResultHandler.getMappedResults();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; Cursor&lt;T&gt; <span class="title function_">selectCursor</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(statement);</span><br><span class="line">            dirty |= ms.isDirtySelect();</span><br><span class="line">            Cursor&lt;T&gt; cursor = executor.queryCursor(ms, wrapCollection(parameter), rowBounds);</span><br><span class="line">            registerCursor(cursor);</span><br><span class="line">            <span class="keyword">return</span> cursor;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error querying database.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(statement);</span><br><span class="line">            dirty |= ms.isDirtySelect();</span><br><span class="line">            <span class="keyword">return</span> executor.query(ms, wrapCollection(parameter), rowBounds, handler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error querying database.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> &#123;</span><br><span class="line">        selectList(statement, parameter, rowBounds, handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(String statement, Object parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(String statement, Object parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dirty = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(statement);</span><br><span class="line">            <span class="keyword">return</span> executor.update(ms, wrapCollection(parameter));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error updating database.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String statement, Object parameter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> update(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> force)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor.commit(isCommitOrRollbackRequired(force));</span><br><span class="line">            dirty = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error committing transaction.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭游标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeCursors</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursorList != <span class="literal">null</span> &amp;&amp; !cursorList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cursor&lt;?&gt; cursor : cursorList) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    cursor.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">&quot;Error closing cursor.  Cause: &quot;</span> + e, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cursorList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册游标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;    返回对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cursor 游标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">registerCursor</span><span class="params">(Cursor&lt;T&gt; cursor)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cursorList == <span class="literal">null</span>) &#123;</span><br><span class="line">            cursorList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        cursorList.add(cursor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要提交或回滚，关闭自动提交且有脏数据时需要</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> force 是否强制返回 true</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否需要提交或回滚</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isCommitOrRollbackRequired</span><span class="params">(<span class="type">boolean</span> force)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !autoCommit &amp;&amp; dirty || force;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将 Collection 和数组包装成 ParamMap</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">wrapCollection</span><span class="params">(<span class="keyword">final</span> Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ParamNameResolver.wrapToMapIfCollection(object, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SqlSessionManager-1"><a href="#SqlSessionManager-1" class="headerlink" title="SqlSessionManager"></a>SqlSessionManager</h4><p>代理 SqlSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SqlSession 管理器，内部有线程私有的 SqlSession，如果 SqlSession 为空，临时开打一个 SqlSession 执行命令</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionManager</span> <span class="keyword">implements</span> <span class="title class_">SqlSessionFactory</span>, SqlSession &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="comment">// SqlSession 代理实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSessionProxy;</span><br><span class="line">    <span class="comment">// 线程私有的 SqlSession</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; localSqlSession = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SqlSessionManager</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">        <span class="built_in">this</span>.sqlSessionProxy = (SqlSession) Proxy.newProxyInstance(SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; SqlSession.class &#125;, <span class="keyword">new</span> <span class="title class_">SqlSessionInterceptor</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建 SqlSessionManager</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SqlSessionManager <span class="title function_">newInstance</span><span class="params">(Reader reader)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SqlSessionManager</span>(<span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(reader, <span class="literal">null</span>, <span class="literal">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动内部 SqlSession</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.localSqlSession.set(openSession());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部 SqlSession 是否启动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isManagedSessionStarted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.localSqlSession.get() != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SqlSession <span class="title function_">openSession</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Configuration <span class="title function_">getConfiguration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.getConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 sqlSessionProxy 执行命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">selectOne</span><span class="params">(String statement)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionProxy.selectOne(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 Configuration 获取 Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getConfiguration().getMapper(type, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 localSqlSession 管理会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">        <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot get connection.  No managed session is started.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sqlSession.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截 sqlSessionProxy 方法调用，使用 localSqlSession 或临时生成一个 SqlSession</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">            <span class="comment">// 使用 localSqlSession 执行方法</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> SqlSessionManager.<span class="built_in">this</span>.localSqlSession.get();</span><br><span class="line">            <span class="keyword">if</span> (sqlSession != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> method.invoke(sqlSession, args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 临时生成一个 SqlSession 执行方法</span></span><br><span class="line">            <span class="keyword">try</span> (<span class="type">SqlSession</span> <span class="variable">autoSqlSession</span> <span class="operator">=</span> openSession()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(autoSqlSession, args);</span><br><span class="line">                    autoSqlSession.commit();</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                    autoSqlSession.rollback();</span><br><span class="line">                    <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><p>构造<code>SqlSession</code>所需的配置均在该类中，<code>Configuration</code> 类包含所有配置开关，所有对<code>Mybatis</code>的配置最终均保存在类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PooledDataSource</span>(driver, url, System.getProperties());</span><br><span class="line"><span class="type">TransactionFactory</span> <span class="variable">transactionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTransactionFactory</span>();</span><br><span class="line"><span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Environment</span>(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line"></span><br><span class="line"><span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>(environment);</span><br><span class="line">configuration.setLazyLoadingEnabled(<span class="literal">true</span>);</span><br><span class="line">configuration.setEnhancementEnabled(<span class="literal">true</span>);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Blog.class);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Post.class);</span><br><span class="line">configuration.getTypeAliasRegistry().registerAlias(Author.class);</span><br><span class="line">configuration.addMapper(BlogMapper.class);</span><br><span class="line">configuration.addMapper(AuthorMapper.class);</span><br></pre></td></tr></table></figure>

<h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><h3 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h3><p>该类相当大，只截取部分源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据配置，创建 SqlSessionFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Configuration</span> &#123;</span><br><span class="line">    <span class="comment">// 全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="variable">cacheEnabled</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH</span></span><br><span class="line">    <span class="comment">// 执行器不仅重用语句还会执行批量更新。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">ExecutorType</span> <span class="variable">defaultExecutorType</span> <span class="operator">=</span> ExecutorType.SIMPLE;</span><br><span class="line">    <span class="comment">// 是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> mapUnderscoreToCamelCase;</span><br><span class="line">    <span class="comment">// MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。</span></span><br><span class="line">    <span class="comment">// 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">LocalCacheScope</span> <span class="variable">localCacheScope</span> <span class="operator">=</span> LocalCacheScope.SESSION;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">InterceptorChain</span> <span class="variable">interceptorChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterceptorChain</span>();</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Map&lt;String, MappedStatement&gt; mappedStatements = <span class="keyword">new</span> <span class="title class_">StrictMap</span>&lt;MappedStatement&gt;(</span><br><span class="line">            <span class="string">&quot;Mapped Statements collection&quot;</span>)</span><br><span class="line">            .conflictMessageProducer((savedValue, targetValue) -&gt; <span class="string">&quot;. please check &quot;</span> + savedValue.getResource() + <span class="string">&quot; and &quot;</span></span><br><span class="line">                    + targetValue.getResource());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建默认执行器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transaction 事务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newExecutor(transaction, defaultExecutorType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建指定类型执行器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transaction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executorType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Executor <span class="title function_">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> &#123;</span><br><span class="line">        executorType = executorType == <span class="literal">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">        Executor executor;</span><br><span class="line">        <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">BatchExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">ReuseExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">SimpleExecutor</span>(<span class="built_in">this</span>, transaction);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">            executor = <span class="keyword">new</span> <span class="title class_">CachingExecutor</span>(executor);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptor</span><span class="params">(Interceptor interceptor)</span> &#123;</span><br><span class="line">        interceptorChain.addInterceptor(interceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappers</span><span class="params">(String packageName, Class&lt;?&gt; superType)</span> &#123;</span><br><span class="line">        mapperRegistry.addMappers(packageName, superType);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappers</span><span class="params">(String packageName)</span> &#123;</span><br><span class="line">        mapperRegistry.addMappers(packageName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> &#123;</span><br><span class="line">        mapperRegistry.addMapper(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addMappedStatement</span><span class="params">(MappedStatement ms)</span> &#123;</span><br><span class="line">        mappedStatements.put(ms.getId(), ms);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">getMappedStatement</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getMappedStatement(id, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MappedStatement <span class="title function_">getMappedStatement</span><span class="params">(String id, <span class="type">boolean</span> validateIncompleteStatements)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (validateIncompleteStatements) &#123;</span><br><span class="line">            buildAllStatements();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mappedStatements.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Parses all the unprocessed statement nodes in the cache. It is recommended to</span></span><br><span class="line"><span class="comment">     * call this method once all the mappers</span></span><br><span class="line"><span class="comment">     * are added as it provides fail-fast statement validation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">buildAllStatements</span><span class="params">()</span> &#123;</span><br><span class="line">        parsePendingResultMaps();</span><br><span class="line">        <span class="keyword">if</span> (!incompleteCacheRefs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (incompleteCacheRefs) &#123;</span><br><span class="line">                incompleteCacheRefs.removeIf(x -&gt; x.resolveCacheRef() != <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!incompleteStatements.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (incompleteStatements) &#123;</span><br><span class="line">                incompleteStatements.removeIf(x -&gt; &#123;</span><br><span class="line">                    x.parseStatementNode();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!incompleteMethods.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (incompleteMethods) &#123;</span><br><span class="line">                incompleteMethods.removeIf(x -&gt; &#123;</span><br><span class="line">                    x.resolve();</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mybatis.org/mybatis-3/zh_CN/java-api.html">mybatis – MyBatis 3 | Java API</a></li>
</ul>
]]></content>
      <categories>
        <category>读源码</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Batch 写入数据库慢</title>
    <url>/2024/spring-batch-jdbc-write-slowly/</url>
    <content><![CDATA[<p>我在项目中使用 Spring Batch 将文本文件导入到数据库中，在将数据导入一个多个字段可能为<code>null</code>的宽表时，十万量级的数据约需十分钟，遂进行排查。</p>
<span id="more"></span>

<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>数据库是 Oracle 19c，驱动为 ojdbc8:12.2.0.1。</p>
<h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><p>新建如下表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `excel` (</span><br><span class="line">  `id` <span class="type">int</span>,</span><br><span class="line">  `str` <span class="type">varchar</span>(<span class="number">50</span>),</span><br><span class="line">  `num1` <span class="type">int</span>,</span><br><span class="line">  `num2` <span class="type">decimal</span>(<span class="number">26</span>,<span class="number">6</span>),</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h3 id="执行批量插入"><a href="#执行批量插入" class="headerlink" title="执行批量插入"></a>执行批量插入</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">insert into <span class="title function_">excel</span><span class="params">(id,str,num1,num2)</span> values (?,?,?,?)</span><br></pre></td></tr></table></figure>

<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p>通过生成导入动作执行期间的火焰图，可以定位到执行耗时长的问题在<code>StatementCreatorUtils.setNull</code>中，相关方法源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作 prepared statement 的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">StatementCreatorUtils</span> &#123;</span><br><span class="line">    <span class="comment">// 是否忽略调用 &#123;@link PreparedStatement#getParameterMetaData()&#125; 方法，默认为 false</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">IGNORE_GETPARAMETERTYPE_PROPERTY_NAME</span> <span class="operator">=</span> <span class="string">&quot;spring.jdbc.getParameterType.ignore&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类加载时读取系统属性 spring.jdbc.getParameterType.ignore 的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">shouldIgnoreGetParameterType</span> <span class="operator">=</span> SpringProperties.getFlag(IGNORE_GETPARAMETERTYPE_PROPERTY_NAME);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 PreparedStatement 参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps         prepared statement 或 callable statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramIndex 参数索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlType    参数的 SQL 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeName   参数的类型名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale      数字精度 (DECIMAL 和 NUMERIC 类型)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inValue    要设置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setParameterValueInternal</span><span class="params">(PreparedStatement ps, <span class="type">int</span> paramIndex, <span class="type">int</span> sqlType,</span></span><br><span class="line"><span class="params">            <span class="meta">@Nullable</span> String typeName, <span class="meta">@Nullable</span> Integer scale, <span class="meta">@Nullable</span> Object inValue)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">typeNameToUse</span> <span class="operator">=</span> typeName;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sqlTypeToUse</span> <span class="operator">=</span> sqlType;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">inValueToUse</span> <span class="operator">=</span> inValue;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果值是 SqlParameterValue 类型，从中取出类型和值</span></span><br><span class="line">        <span class="keyword">if</span> (inValue <span class="keyword">instanceof</span> SqlParameterValue) &#123;</span><br><span class="line">            <span class="type">SqlParameterValue</span> <span class="variable">parameterValue</span> <span class="operator">=</span> (SqlParameterValue) inValue;</span><br><span class="line">            <span class="keyword">if</span> (parameterValue.getSqlType() != SqlTypeValue.TYPE_UNKNOWN) &#123;</span><br><span class="line">                sqlTypeToUse = parameterValue.getSqlType();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parameterValue.getTypeName() != <span class="literal">null</span>) &#123;</span><br><span class="line">                typeNameToUse = parameterValue.getTypeName();</span><br><span class="line">            &#125;</span><br><span class="line">            inValueToUse = parameterValue.getValue();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果值是 null 调用 setNull</span></span><br><span class="line">        <span class="keyword">if</span> (inValueToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">            setNull(ps, paramIndex, sqlTypeToUse, typeNameToUse);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setValue(ps, paramIndex, sqlTypeToUse, typeNameToUse, scale, inValueToUse);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 PreparedStatement 参数为 null</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ps         prepared statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> paramIndex 参数索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sqlType    参数的 SQL 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> typeName   参数的类型名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setNull</span><span class="params">(PreparedStatement ps, <span class="type">int</span> paramIndex, <span class="type">int</span> sqlType, <span class="meta">@Nullable</span> String typeName)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 如果参数 SQL 类型未知，通过数据库信息判断类型</span></span><br><span class="line">        <span class="keyword">if</span> (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER &amp;&amp; typeName == <span class="literal">null</span>)) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">useSetObject</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">sqlTypeToUse</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">// 尝试调用 java.sql.ParameterMetaData#getParameterType 获取参数 SQL 类型</span></span><br><span class="line">            <span class="keyword">if</span> (!shouldIgnoreGetParameterType) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">&quot;JDBC getParameterType call failed - using fallback method instead: &quot;</span> + ex);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过数据库信息确定要使用的参数 SQL 类型</span></span><br><span class="line">            <span class="keyword">if</span> (sqlTypeToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                sqlTypeToUse = Types.NULL;</span><br><span class="line">                <span class="type">DatabaseMetaData</span> <span class="variable">dbmd</span> <span class="operator">=</span> ps.getConnection().getMetaData();</span><br><span class="line">                <span class="type">String</span> <span class="variable">jdbcDriverName</span> <span class="operator">=</span> dbmd.getDriverName();</span><br><span class="line">                <span class="type">String</span> <span class="variable">databaseProductName</span> <span class="operator">=</span> dbmd.getDatabaseProductName();</span><br><span class="line">                <span class="keyword">if</span> (databaseProductName.startsWith(<span class="string">&quot;Informix&quot;</span>) ||</span><br><span class="line">                        (jdbcDriverName.startsWith(<span class="string">&quot;Microsoft&quot;</span>) &amp;&amp; jdbcDriverName.contains(<span class="string">&quot;SQL Server&quot;</span>))) &#123;</span><br><span class="line">                    useSetObject = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (databaseProductName.startsWith(<span class="string">&quot;DB2&quot;</span>) ||</span><br><span class="line">                        jdbcDriverName.startsWith(<span class="string">&quot;jConnect&quot;</span>) ||</span><br><span class="line">                        jdbcDriverName.startsWith(<span class="string">&quot;SQLServer&quot;</span>) ||</span><br><span class="line">                        jdbcDriverName.startsWith(<span class="string">&quot;Apache Derby&quot;</span>)) &#123;</span><br><span class="line">                    sqlTypeToUse = Types.VARCHAR;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (useSetObject) &#123;</span><br><span class="line">                <span class="comment">// SQL Server 调用 PreparedStatement.setObject</span></span><br><span class="line">                ps.setObject(paramIndex, <span class="literal">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 其他数据库调用 PreparedStatement.setNull</span></span><br><span class="line">                ps.setNull(paramIndex, sqlTypeToUse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeName != <span class="literal">null</span>) &#123;</span><br><span class="line">            ps.setNull(paramIndex, sqlType, typeName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ps.setNull(paramIndex, sqlType);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于 Oracle，当需要设置的参数值为 <code>null</code> 时，StatementCreatorUtils 会调用<br><code>OraclePreparedStatement.getParameterMetaData</code>方法获取参数元数据，<br>然后调用<code>OracleParameterMetaData.getParameterType</code>获取参数类型。</p>
<p>问题就出在这里，对于每一个值为<code>null</code>的参数，Spring 都会调用<code>OraclePreparedStatement.getParameterMetaData</code>远程查询数据库，这里花费较多时间；然后调用<code>OracleParameterMetaData.getParameterType</code>获取参数类型，期间会调用<code>OracleParameterMetaData.checkValidIndex</code>检查索引是否合法，此处会抛出<code>SQLFeatureNotSupportedException</code>异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">checkValidIndex</span><span class="params">(<span class="type">int</span> var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.throwUnsupportedFeature) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (SQLException) ((SQLException) DatabaseError.createSQLFeatureNotSupportedException(<span class="string">&quot;checkValidIndex&quot;</span>)</span><br><span class="line">                .fillInStackTrace());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (var1 &lt; <span class="number">1</span> || var1 &gt; <span class="built_in">this</span>.parameterCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (SQLException) ((SQLException) DatabaseError</span><br><span class="line">                .createSqlException(<span class="built_in">this</span>.getConnectionDuringExceptionHandling(), <span class="number">3</span>).fillInStackTrace());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>截至目前，最新的关于该问题的 commit<br><a href="https://github.com/spring-projects/spring-framework/commit/77b0382a6c86f654958368e4e2709f2343100ada">Bypass getParameterType by default for PostgreSQL and SQL Server drivers</a><br>对 PostgreSQL and SQL Server 进行了特殊处理，在不配置系统属性<code>spring.jdbc.getParameterType.ignore</code>时，将 SQL 类型直接设置为<code>NULL</code>。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>设置系统属性<code>spring.jdbc.getParameterType.ignore</code>为<code>true</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/spring-projects/spring-framework/issues/19143">Avoid repeated getParameterType calls for setNull with Oracle 12c driver [SPR-14574] · Issue #19143 · spring-projects&#x2F;spring-framework (github.com)</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/issues/18398">Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) [SPR-13825] · Issue #18398 · spring-projects&#x2F;spring-framework (github.com)</a></li>
<li><a href="https://github.com/spring-projects/spring-framework/issues/25679">Improve default <code>setNull</code> performance on PostgreSQL and MS SQL Server (e.g. for <code>NamedParameterJdbcTemplate</code> batch updates) · Issue #25679 · spring-projects&#x2F;spring-framework (github.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>解决问题</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>生产问题</tag>
      </tags>
  </entry>
  <entry>
    <title>读 Mybatis 源码（二）</title>
    <url>/2024/mybatis-2/</url>
    <content><![CDATA[<p><code>executor</code> 模块位于<code>org.apache.ibatis.executor</code>包下，此模块的提供了用户使用 Mybatis 的主要接口和配置类。主要的类和接口有</p>
<ul>
<li>Executor</li>
<li>StatementHandler</li>
</ul>
<span id="more"></span>

<h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><pre><code class="highlight mermaid">classDiagram
direction BT

class BaseExecutor
class BatchExecutor
class CachingExecutor
class Executor &#123;
&lt;&lt;Interface&gt;&gt;
&#125;
class ReuseExecutor
class SimpleExecutor

BaseExecutor  ..&gt;  Executor
BatchExecutor  --&gt;  BaseExecutor
CachingExecutor  ..&gt;  Executor
ReuseExecutor  --&gt;  BaseExecutor
SimpleExecutor  --&gt;  BaseExecutor</code></pre>

<h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><code>SqlSession</code>通过<code>Executor</code>操作数据库，<code>DefaultSqlSession</code>使用<code>Executor</code>的方式有以下几种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> configuration.getMappedStatement(statement);</span><br><span class="line"><span class="comment">// 查询修改数据</span></span><br><span class="line">Cursor&lt;T&gt; cursor = executor.queryCursor(ms, wrapCollection(parameter), rowBounds);</span><br><span class="line">List&lt;E&gt; list = executor.query(ms, wrapCollection(parameter), rowBounds, handler);</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> executor.update(ms, wrapCollection(parameter));</span><br><span class="line"><span class="comment">// 操作事务和批量</span></span><br><span class="line">executor.commit(isCommitOrRollbackRequired(force));</span><br><span class="line">executor.rollback(isCommitOrRollbackRequired(force));</span><br><span class="line">List&lt;BatchResult&gt; results = executor.flushStatements();</span><br><span class="line"><span class="comment">// 关闭会话</span></span><br><span class="line">executor.close(isCommitOrRollbackRequired(<span class="literal">false</span>));</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> executor.getTransaction().getConnection();</span><br><span class="line"><span class="comment">// 清除会话缓存</span></span><br><span class="line">executor.clearLocalCache();</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><code>SqlSessionFactoryBuilder</code> 的方法有如下三类</p>
<ul>
<li>从字符流创建<code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(Reader reader)</td>
</tr>
<tr>
<td>build(Reader reader, String environment)</td>
</tr>
<tr>
<td>build(Reader reader, Properties properties)</td>
</tr>
<tr>
<td>build(Reader reader, String environment, Properties properties)</td>
</tr>
</tbody></table>
<p>最终通过<code>build(Reader reader, String environment, Properties properties)</code>解析<code>XML</code>，调用<code>build(Configuration config)</code>。</p>
<ul>
<li>从字节流创建<code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(InputStream inputStream)</td>
</tr>
<tr>
<td>build(InputStream inputStream, String environment)</td>
</tr>
<tr>
<td>build(InputStream inputStream, Properties properties)</td>
</tr>
<tr>
<td>build(InputStream inputStream, String environment, Properties properties)</td>
</tr>
</tbody></table>
<p>最终通过<code>build(InputStream inputStream, String environment, Properties properties)</code>解析<code>XML</code>，调用<code>build(Configuration config)</code>。</p>
<ul>
<li>通过 <code>Configuration</code> 创建 <code>SqlSessionFactory</code></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>build(Configuration config)</td>
</tr>
</tbody></table>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行 MappedStatement 的执行器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Executor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询，</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;E&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowBounds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundSql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,</span></span><br><span class="line"><span class="params">            CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rowBounds</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> boundSql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CacheKey <span class="title function_">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ms</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resultObject</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> property</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> targetType</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否关闭</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isClosed</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> executor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setExecutorWrapper</span><span class="params">(Executor executor)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> required)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clearLocalCache</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">close</span><span class="params">(<span class="type">boolean</span> forceRollback)</span>;</span><br><span class="line"></span><br><span class="line">    Transaction <span class="title function_">getTransaction</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><h4 id="SimpleExecutor"><a href="#SimpleExecutor" class="headerlink" title="SimpleExecutor"></a>SimpleExecutor</h4><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><p>准备<code>Statement</code>，调用<code>StatementHandler</code>执行数据库操作，执行完毕关闭<code>Statement</code>。</p>
<h5 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h5><p><code>SimpleExecutor</code> 实现了<code>BaseExecutor</code>的四个抽象方法，在其中获取可执行的 <code>Statement</code>，然后调用<code>StatementHandler</code>执行数据库操作。</p>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>doUpdate(MappedStatement ms, Object parameter)</td>
</tr>
<tr>
<td>doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</td>
</tr>
<tr>
<td>doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</td>
</tr>
<tr>
<td>doFlushStatements(boolean isRollback)</td>
</tr>
</tbody></table>
<p><mark>SimpleExecutor 不支持批量操作，doFlushStatements 返回空列表</mark></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>prepareStatement(StatementHandler handler, Log statementLog)</td>
<td>通过 Connection 创建 Statement</td>
</tr>
</tbody></table>
<h5 id="源码-1"><a href="#源码-1" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的执行器，使用完 Statement 立刻关闭</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleExecutor</span> <span class="keyword">extends</span> <span class="title class_">BaseExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleExecutor</span><span class="params">(Configuration configuration, Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(configuration, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">            <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="literal">null</span>,</span><br><span class="line">                    <span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">            stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">            <span class="comment">// 执行更新</span></span><br><span class="line">            <span class="keyword">return</span> handler.update(stmt);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭 Statement</span></span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,</span></span><br><span class="line"><span class="params">            BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">            <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds,</span><br><span class="line">                    resultHandler,</span><br><span class="line">                    boundSql);</span><br><span class="line">            <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">            stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">            <span class="comment">// 执行查询列表</span></span><br><span class="line">            <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭 Statement</span></span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">doQueryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, <span class="literal">null</span>, boundSql);</span><br><span class="line">        <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        <span class="comment">// 执行查询游标</span></span><br><span class="line">        Cursor&lt;E&gt; cursor = handler.queryCursor(stmt);</span><br><span class="line">        <span class="comment">// 读取完成关闭 Statement</span></span><br><span class="line">        stmt.closeOnCompletion();</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不是批量，什么也不做</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title function_">doFlushStatements</span><span class="params">(<span class="type">boolean</span> isRollback)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可执行的 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler      StatementHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statementLog 用于记录 Statement 日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Statement <span class="title function_">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        Statement stmt;</span><br><span class="line">        <span class="comment">// 获取 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(statementLog);</span><br><span class="line">        <span class="comment">// 创建并设置 Statement</span></span><br><span class="line">        stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">        <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">        handler.parameterize(stmt);</span><br><span class="line">        <span class="keyword">return</span> stmt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ReuseExecutor"><a href="#ReuseExecutor" class="headerlink" title="ReuseExecutor"></a>ReuseExecutor</h4><h5 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h5><p>准备<code>Statement</code>，调用<code>StatementHandler</code>执行数据库操作，缓存<code>Statement</code>。</p>
<h5 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h5><p><code>ReuseExecutor</code> 实现了<code>BaseExecutor</code>的四个抽象方法，在其中获取可执行的 <code>Statement</code>，然后调用<code>StatementHandler</code>执行数据库操作。</p>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>int doUpdate(MappedStatement ms, Object parameter)</td>
</tr>
<tr>
<td>List&lt;E&gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</td>
</tr>
<tr>
<td>Cursor&lt;E&gt; doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</td>
</tr>
<tr>
<td>List&lt;BatchResult&gt; doFlushStatements(boolean isRollback)</td>
</tr>
</tbody></table>
<p><mark>SimpleExecutor 不支持批量操作，doFlushStatements 返回空列表</mark></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Statement prepareStatement(StatementHandler handler, Log statementLog)</td>
<td>通过 Connection 创建 Statement</td>
</tr>
<tr>
<td>boolean hasStatementFor(String sql)</td>
<td></td>
</tr>
<tr>
<td>Statement getStatement(String s)</td>
<td></td>
</tr>
<tr>
<td>void putStatement(String sql, Statement stmt)</td>
<td></td>
</tr>
</tbody></table>
<h5 id="源码-2"><a href="#源码-2" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复用执行器，缓存 Statement，用 SQL 判断是否相同的 Statement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReuseExecutor</span> <span class="keyword">extends</span> <span class="title class_">BaseExecutor</span> &#123;</span><br><span class="line">    <span class="comment">// Statement 缓存，key 为 SQL</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Statement&gt; statementMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ReuseExecutor</span><span class="params">(Configuration configuration, Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(configuration, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="literal">null</span>,</span><br><span class="line">                <span class="literal">null</span>);</span><br><span class="line">        <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        <span class="comment">// 执行更新</span></span><br><span class="line">        <span class="keyword">return</span> handler.update(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler,</span></span><br><span class="line"><span class="params">            BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler,</span><br><span class="line">                boundSql);</span><br><span class="line">        <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        <span class="comment">// 执行查询列表</span></span><br><span class="line">        <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">doQueryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, <span class="literal">null</span>, boundSql);</span><br><span class="line">        <span class="comment">// 获取可执行的 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        <span class="comment">// 执行查询游标</span></span><br><span class="line">        <span class="keyword">return</span> handler.queryCursor(stmt);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭并清空缓存的 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isRollback 是否回滚，无用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 空列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title function_">doFlushStatements</span><span class="params">(<span class="type">boolean</span> isRollback)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Statement stmt : statementMap.values()) &#123;</span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">        &#125;</span><br><span class="line">        statementMap.clear();</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取可执行的 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler      StatementHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statementLog 用于记录 Statement 日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Statement <span class="title function_">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        Statement stmt;</span><br><span class="line">        <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> handler.getBoundSql();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 缓存 Statement</span></span><br><span class="line">        <span class="keyword">if</span> (hasStatementFor(sql)) &#123;</span><br><span class="line">            stmt = getStatement(sql);</span><br><span class="line">            <span class="comment">// 为什么要再次设置超时时间？</span></span><br><span class="line">            applyTransactionTimeout(stmt);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(statementLog);</span><br><span class="line">            <span class="comment">// 创建并设置 Statement</span></span><br><span class="line">            stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">            putStatement(sql, stmt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">        handler.parameterize(stmt);</span><br><span class="line">        <span class="keyword">return</span> stmt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有 Statement 缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql SQL</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 缓存中有 Statement 且 Connection 未关闭返回真</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">hasStatementFor</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> statementMap.get(sql);</span><br><span class="line">            <span class="keyword">return</span> statement != <span class="literal">null</span> &amp;&amp; !statement.getConnection().isClosed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Statement <span class="title function_">getStatement</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> statementMap.get(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">putStatement</span><span class="params">(String sql, Statement stmt)</span> &#123;</span><br><span class="line">        statementMap.put(sql, stmt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BatchExecutor"><a href="#BatchExecutor" class="headerlink" title="BatchExecutor"></a>BatchExecutor</h4><h5 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h5><p>准备<code>Statement</code>，调用<code>StatementHandler</code>执行数据库操作，执行完毕关闭<code>Statement</code>。</p>
<h5 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h5><p><code>SimpleExecutor</code> 实现了<code>BaseExecutor</code>的四个抽象方法，在其中获取可执行的 <code>Statement</code>，然后调用<code>StatementHandler</code>执行数据库操作。</p>
<table>
<thead>
<tr>
<th>方法</th>
</tr>
</thead>
<tbody><tr>
<td>doUpdate(MappedStatement ms, Object parameter)</td>
</tr>
<tr>
<td>doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</td>
</tr>
<tr>
<td>doQueryCursor(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</td>
</tr>
<tr>
<td>doFlushStatements(boolean isRollback)</td>
</tr>
</tbody></table>
<p><mark>SimpleExecutor 不支持批量操作，doFlushStatements 返回空列表</mark></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>prepareStatement(StatementHandler handler, Log statementLog)</td>
<td>通过 Connection 创建 Statement</td>
</tr>
</tbody></table>
<h5 id="源码-3"><a href="#源码-3" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复用执行器，缓存 Statement，用 SQL 判断是否相同的 Statement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BatchExecutor</span> <span class="keyword">extends</span> <span class="title class_">BaseExecutor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BATCH_UPDATE_RETURN_VALUE</span> <span class="operator">=</span> Integer.MIN_VALUE + <span class="number">1002</span>;</span><br><span class="line">    <span class="comment">// 保存需要执行的 Statement</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Statement&gt; statementList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 保存执行结果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;BatchResult&gt; batchResultList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">// 当前的 SQL</span></span><br><span class="line">    <span class="keyword">private</span> String currentSql;</span><br><span class="line">    <span class="comment">// 当前的 MappedStatement</span></span><br><span class="line">    <span class="keyword">private</span> MappedStatement currentStatement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BatchExecutor</span><span class="params">(Configuration configuration, Transaction transaction)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(configuration, transaction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量更新，仅执行 addBatch，不提交到数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">doUpdate</span><span class="params">(MappedStatement ms, Object parameterObject)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(<span class="built_in">this</span>, ms, parameterObject, RowBounds.DEFAULT,</span><br><span class="line">                <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">BoundSql</span> <span class="variable">boundSql</span> <span class="operator">=</span> handler.getBoundSql();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="keyword">final</span> Statement stmt;</span><br><span class="line">        <span class="keyword">if</span> (sql.equals(currentSql) &amp;&amp; ms.equals(currentStatement)) &#123;</span><br><span class="line">            <span class="comment">// 和上一个 SQL 和 MappedStatement 相同，复用 Statement</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> statementList.size() - <span class="number">1</span>;</span><br><span class="line">            stmt = statementList.get(last);</span><br><span class="line">            applyTransactionTimeout(stmt);</span><br><span class="line">            <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">            handler.parameterize(stmt);</span><br><span class="line">            <span class="comment">// 向上一个 BatchResult 添加参数</span></span><br><span class="line">            <span class="type">BatchResult</span> <span class="variable">batchResult</span> <span class="operator">=</span> batchResultList.get(last);</span><br><span class="line">            batchResult.addParameterObject(parameterObject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(ms.getStatementLog());</span><br><span class="line">            stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">            <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">            handler.parameterize(stmt);</span><br><span class="line">            <span class="comment">// 保存 SQL、MappedStatement、Statement、BatchResult</span></span><br><span class="line">            currentSql = sql;</span><br><span class="line">            currentStatement = ms;</span><br><span class="line">            statementList.add(stmt);</span><br><span class="line">            batchResultList.add(<span class="keyword">new</span> <span class="title class_">BatchResult</span>(ms, sql, parameterObject));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行 Statement.addBatch 或 PreparedStatement.addBatch 方法，根据</span></span><br><span class="line">        handler.batch(stmt);</span><br><span class="line">        <span class="keyword">return</span> BATCH_UPDATE_RETURN_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相比 SimpleExecutor，多了一步执行了批量更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">doQuery</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds,</span></span><br><span class="line"><span class="params">            ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行批量更新</span></span><br><span class="line">            flushStatements();</span><br><span class="line">            <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">            <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">            <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameterObject, rowBounds,</span><br><span class="line">                    resultHandler, boundSql);</span><br><span class="line">            <span class="comment">// 获取 Connection</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(ms.getStatementLog());</span><br><span class="line">            <span class="comment">// 创建并设置 Statement</span></span><br><span class="line">            stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">            <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">            handler.parameterize(stmt);</span><br><span class="line">            <span class="comment">// 执行查询列表</span></span><br><span class="line">            <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 相比 SimpleExecutor，多了一步执行了批量更新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">doQueryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, BoundSql boundSql)</span></span><br><span class="line">            <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 执行批量更新</span></span><br><span class="line">        flushStatements();</span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> ms.getConfiguration();</span><br><span class="line">        <span class="comment">// 获取 StatementHandler</span></span><br><span class="line">        <span class="type">StatementHandler</span> <span class="variable">handler</span> <span class="operator">=</span> configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, <span class="literal">null</span>, boundSql);</span><br><span class="line">        <span class="comment">// 获取 Connection</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> getConnection(ms.getStatementLog());</span><br><span class="line">        <span class="comment">// 创建并设置 Statement</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">        <span class="comment">// 设置 SQL 参数</span></span><br><span class="line">        handler.parameterize(stmt);</span><br><span class="line">        <span class="comment">// 执行查询游标</span></span><br><span class="line">        Cursor&lt;E&gt; cursor = handler.queryCursor(stmt);</span><br><span class="line">        <span class="comment">// 读取完成关闭 Statement</span></span><br><span class="line">        stmt.closeOnCompletion();</span><br><span class="line">        <span class="keyword">return</span> cursor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行批量更新，清空待执行的 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> isRollback 是否进行回滚</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 批量结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title function_">doFlushStatements</span><span class="params">(<span class="type">boolean</span> isRollback)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;BatchResult&gt; results = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">if</span> (isRollback) &#123;</span><br><span class="line">                <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// statementList 中的每一个 Statement 均执行一次 executeBatch</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = statementList.size(); i &lt; n; i++) &#123;</span><br><span class="line">                <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> statementList.get(i);</span><br><span class="line">                applyTransactionTimeout(stmt);</span><br><span class="line">                <span class="type">BatchResult</span> <span class="variable">batchResult</span> <span class="operator">=</span> batchResultList.get(i);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 执行 Statement.executeBatch 方法</span></span><br><span class="line">                    batchResult.setUpdateCounts(stmt.executeBatch());</span><br><span class="line">                    <span class="type">MappedStatement</span> <span class="variable">ms</span> <span class="operator">=</span> batchResult.getMappedStatement();</span><br><span class="line">                    List&lt;Object&gt; parameterObjects = batchResult.getParameterObjects();</span><br><span class="line">                    <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> ms.getKeyGenerator();</span><br><span class="line">                    <span class="keyword">if</span> (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) &#123;</span><br><span class="line">                        <span class="type">Jdbc3KeyGenerator</span> <span class="variable">jdbc3KeyGenerator</span> <span class="operator">=</span> (Jdbc3KeyGenerator) keyGenerator;</span><br><span class="line">                        jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!NoKeyGenerator.class.equals(keyGenerator.getClass())) &#123; <span class="comment">// issue #141</span></span><br><span class="line">                        <span class="keyword">for</span> (Object parameter : parameterObjects) &#123;</span><br><span class="line">                            keyGenerator.processAfter(<span class="built_in">this</span>, ms, stmt, parameter);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 关闭 Statement</span></span><br><span class="line">                    closeStatement(stmt);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BatchUpdateException e) &#123;</span><br><span class="line">                    <span class="type">StringBuilder</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">                    message.append(batchResult.getMappedStatement().getId()).append(<span class="string">&quot; (batch index #&quot;</span>).append(i + <span class="number">1</span>)</span><br><span class="line">                            .append(<span class="string">&quot;)&quot;</span>)</span><br><span class="line">                            .append(<span class="string">&quot; failed.&quot;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        message.append(<span class="string">&quot; &quot;</span>).append(i)</span><br><span class="line">                                .append(<span class="string">&quot; prior sub executor(s) completed successfully, but will be rolled back.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BatchExecutorException</span>(message.toString(), e, results, batchResult);</span><br><span class="line">                &#125;</span><br><span class="line">                results.add(batchResult);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> results;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭 Statement，清空批量更新信息</span></span><br><span class="line">            <span class="keyword">for</span> (Statement stmt : statementList) &#123;</span><br><span class="line">                closeStatement(stmt);</span><br><span class="line">            &#125;</span><br><span class="line">            currentSql = <span class="literal">null</span>;</span><br><span class="line">            statementList.clear();</span><br><span class="line">            batchResultList.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h2><pre><code class="highlight mermaid">classDiagram
direction BT

class BaseStatementHandler
class CallableStatementHandler
class PreparedStatementHandler
class RoutingStatementHandler
class SimpleStatementHandler
class StatementHandler &#123;
&lt;&lt;Interface&gt;&gt;
&#125;

BaseStatementHandler  ..&gt;  StatementHandler
CallableStatementHandler  --&gt;  BaseStatementHandler
PreparedStatementHandler  --&gt;  BaseStatementHandler
RoutingStatementHandler  ..&gt;  StatementHandler
SimpleStatementHandler  --&gt;  BaseStatementHandler</code></pre>

<h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><p>定义了操作数据库实现批量、更新、查询的接口。将底层的<code>SimpleStatement</code>、<code>PreparedStatement</code>、<code>CallableStatement</code>操作抽象化，屏蔽具体技术细节。</p>
<h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><p>主要的方法为操作数据库。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Statement prepare(Connection connection, Integer transactionTimeout)</td>
<td>创建并配置<code>Statement</code></td>
</tr>
<tr>
<td>void parameterize(Statement statement)</td>
<td>设置<code>SQL</code>参数</td>
</tr>
<tr>
<td>void batch(Statement statement)</td>
<td>添加批量</td>
</tr>
<tr>
<td>int update(Statement statement)</td>
<td>执行更新</td>
</tr>
<tr>
<td>&lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</td>
<td>执行查询</td>
</tr>
<tr>
<td>&lt;E&gt; Cursor&lt;E&gt; queryCursor(Statement statement)</td>
<td>执行查询</td>
</tr>
<tr>
<td>BoundSql getBoundSql()</td>
<td>获取<code>SQL</code></td>
</tr>
<tr>
<td>ParameterHandler getParameterHandler()</td>
<td>获取参数处理器</td>
</tr>
</tbody></table>
<h3 id="源码-4"><a href="#源码-4" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StatementHandler</span> &#123;</span><br><span class="line">    Statement <span class="title function_">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    BoundSql <span class="title function_">getBoundSql</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    ParameterHandler <span class="title function_">getParameterHandler</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现类-1"><a href="#实现类-1" class="headerlink" title="实现类"></a>实现类</h3><h4 id="RoutingStatementHandler"><a href="#RoutingStatementHandler" class="headerlink" title="RoutingStatementHandler"></a>RoutingStatementHandler</h4><h5 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h5><p><code>StatementHandler</code>委派模式实现类，实例化时根据传入的<code>MappedStatement</code>类型创建<br><code>SimpleStatementHandler</code>、<code>PreparedStatementHandler</code>、<code>CallableStatementHandler</code>。</p>
<p><code>RoutingStatementHandler</code>很好地屏蔽了底层的数据库交互技术细节，自动选择合适的<br><code>StatementHandler</code>实现类，调用委派实例的方法。</p>
<p><code>Mybatis</code>其他模块需要<code>StatementHandler</code>时，通过且仅通过<code>Configuration.newStatementHandler</code>方法获取该类实例，无需知道<code>SimpleStatementHandler</code>、<code>PreparedStatementHandler</code>、<code>CallableStatementHandler</code>的存在。</p>
<h5 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h5><p>与<code>StatementHandler</code>相同，实现为调用委派实例的方法。</p>
<h5 id="源码-5"><a href="#源码-5" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StatementHandler 委派模式实现类，实例化时根据 MappedStatement 类型创建</span></span><br><span class="line"><span class="comment"> * SimpleStatementHandler、PreparedStatementHandler、CallableStatementHandler</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Mybatis 其他模块通过 Configuration.newStatementHandler 方法获取该类实例，自动选择合适的</span></span><br><span class="line"><span class="comment"> * StatementHandler 实现类，屏蔽了底层的数据库交互细节</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoutingStatementHandler</span> <span class="keyword">implements</span> <span class="title class_">StatementHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 委派的示例，所有 JDBC 交互均由其完成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StatementHandler delegate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds,</span></span><br><span class="line"><span class="params">            ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="comment">// 对应 JDBC 规范中的三种 Statement</span></span><br><span class="line">        <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> STATEMENT:</span><br><span class="line">                delegate = <span class="keyword">new</span> <span class="title class_">SimpleStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> PREPARED:</span><br><span class="line">                delegate = <span class="keyword">new</span> <span class="title class_">PreparedStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CALLABLE:</span><br><span class="line">                delegate = <span class="keyword">new</span> <span class="title class_">CallableStatementHandler</span>(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Unknown statement type: &quot;</span> + ms.getStatementType());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Statement <span class="title function_">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.prepare(connection, transactionTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        delegate.parameterize(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        delegate.batch(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.update(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.query(statement, resultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.queryCursor(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getBoundSql();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ParameterHandler <span class="title function_">getParameterHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getParameterHandler();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="BaseStatementHandler"><a href="#BaseStatementHandler" class="headerlink" title="BaseStatementHandler"></a>BaseStatementHandler</h4><h5 id="作用-6"><a href="#作用-6" class="headerlink" title="作用"></a>作用</h5><p>将 <code>SimpleStatementHandler</code>、<code>PreparedStatementHandler</code>、<code>CallableStatementHandler</code>的共有代码提取到了该类，将构造<code>StatementHandler</code>所需对象放到了该类，实现了创建并配置 Statement 方法。</p>
<h5 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h5><p>实现了<code>StatementHandler</code>的<code>prepare</code>、<code>getBoundSql</code>、<code>getParameterHandler</code>方法，抽象方法<code>instantiateStatement</code>留给子类实现。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Statement prepare(Connection connection, Integer transactionTimeout)</td>
<td>创建并配置<code>Statement</code></td>
</tr>
<tr>
<td>Statement instantiateStatement(Connection connection)</td>
<td>实例化<code>Statement</code></td>
</tr>
<tr>
<td>void setStatementTimeout(Statement stmt, Integer transactionTimeout)</td>
<td>设置<code>Statement</code>超时时间</td>
</tr>
<tr>
<td>void setFetchSize(Statement stmt)</td>
<td>设置每次从数据库取的条数</td>
</tr>
<tr>
<td>void closeStatement(Statement statement)</td>
<td>关闭<code>Statement</code></td>
</tr>
<tr>
<td>void generateKeys(Object parameter)</td>
<td></td>
</tr>
<tr>
<td>BoundSql getBoundSql()</td>
<td></td>
</tr>
<tr>
<td>ParameterHandler getParameterHandler()</td>
<td></td>
</tr>
</tbody></table>
<h5 id="源码-6"><a href="#源码-6" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * StatementHandler 实现类公共代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseStatementHandler</span> <span class="keyword">implements</span> <span class="title class_">StatementHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Configuration configuration;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ObjectFactory objectFactory;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> TypeHandlerRegistry typeHandlerRegistry;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ResultSetHandler resultSetHandler;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> ParameterHandler parameterHandler;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Executor executor;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> MappedStatement mappedStatement;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> RowBounds rowBounds;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BoundSql boundSql;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">BaseStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameterObject,</span></span><br><span class="line"><span class="params">            RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configuration = mappedStatement.getConfiguration();</span><br><span class="line">        <span class="built_in">this</span>.executor = executor;</span><br><span class="line">        <span class="built_in">this</span>.mappedStatement = mappedStatement;</span><br><span class="line">        <span class="built_in">this</span>.rowBounds = rowBounds;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.typeHandlerRegistry = configuration.getTypeHandlerRegistry();</span><br><span class="line">        <span class="built_in">this</span>.objectFactory = configuration.getObjectFactory();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (boundSql == <span class="literal">null</span>) &#123;</span><br><span class="line">            generateKeys(parameterObject);</span><br><span class="line">            boundSql = mappedStatement.getBoundSql(parameterObject);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.boundSql = boundSql;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.parameterHandler = configuration.newParameterHandler(mappedStatement, parameterObject, boundSql);</span><br><span class="line">        <span class="built_in">this</span>.resultSetHandler = configuration.newResultSetHandler(executor, mappedStatement, rowBounds,</span><br><span class="line">                parameterHandler,</span><br><span class="line">                resultHandler, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BoundSql <span class="title function_">getBoundSql</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> boundSql;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ParameterHandler <span class="title function_">getParameterHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> parameterHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建并配置 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection         Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> transactionTimeout 事务超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Statement <span class="title function_">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        ErrorContext.instance().sql(boundSql.getSql());</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化 Statement</span></span><br><span class="line">            statement = instantiateStatement(connection);</span><br><span class="line">            <span class="comment">// 设置超时时间</span></span><br><span class="line">            setStatementTimeout(statement, transactionTimeout);</span><br><span class="line">            <span class="comment">// 设置 fetchSize</span></span><br><span class="line">            setFetchSize(statement);</span><br><span class="line">            <span class="keyword">return</span> statement;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            closeStatement(statement);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            closeStatement(statement);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(<span class="string">&quot;Error preparing statement.  Cause: &quot;</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化 Statement，交给子类实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connection Connection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> Statement <span class="title function_">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置 Statement 超时时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement Statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setStatementTimeout</span><span class="params">(Statement stmt, Integer transactionTimeout)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">queryTimeout</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 从 MappedStatement 或 Configuration 获取超时时间</span></span><br><span class="line">        <span class="keyword">if</span> (mappedStatement.getTimeout() != <span class="literal">null</span>) &#123;</span><br><span class="line">            queryTimeout = mappedStatement.getTimeout();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (configuration.getDefaultStatementTimeout() != <span class="literal">null</span>) &#123;</span><br><span class="line">            queryTimeout = configuration.getDefaultStatementTimeout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (queryTimeout != <span class="literal">null</span>) &#123;</span><br><span class="line">            stmt.setQueryTimeout(queryTimeout);</span><br><span class="line">        &#125;</span><br><span class="line">        StatementUtil.applyTransactionTimeout(stmt, queryTimeout, transactionTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置每次从数据库取的条数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stmt Statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">setFetchSize</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">fetchSize</span> <span class="operator">=</span> mappedStatement.getFetchSize();</span><br><span class="line">        <span class="keyword">if</span> (fetchSize != <span class="literal">null</span>) &#123;</span><br><span class="line">            stmt.setFetchSize(fetchSize);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">defaultFetchSize</span> <span class="operator">=</span> configuration.getDefaultFetchSize();</span><br><span class="line">        <span class="keyword">if</span> (defaultFetchSize != <span class="literal">null</span>) &#123;</span><br><span class="line">            stmt.setFetchSize(defaultFetchSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭 Statement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> statement Statement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">closeStatement</span><span class="params">(Statement statement)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement != <span class="literal">null</span>) &#123;</span><br><span class="line">                statement.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">generateKeys</span><span class="params">(Object parameter)</span> &#123;</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> mappedStatement.getKeyGenerator();</span><br><span class="line">        ErrorContext.instance().store();</span><br><span class="line">        keyGenerator.processBefore(executor, mappedStatement, <span class="literal">null</span>, parameter);</span><br><span class="line">        ErrorContext.instance().recall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SimpleStatementHandler"><a href="#SimpleStatementHandler" class="headerlink" title="SimpleStatementHandler"></a>SimpleStatementHandler</h4><h5 id="作用-7"><a href="#作用-7" class="headerlink" title="作用"></a>作用</h5><p>使用<code>Statement</code>执行<code>SQL</code>的底层类，封装了所有<code>Statement</code>使用细节。</p>
<h5 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h5><p>实现了<code>Statement</code>操作数据库的具体方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>int update(Statement statement)</td>
<td>执行更新</td>
</tr>
<tr>
<td>void batch(Statement statement)</td>
<td>添加批量</td>
</tr>
<tr>
<td>&lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</td>
<td>执行查询</td>
</tr>
<tr>
<td>&lt;E&gt; Cursor&lt;E&gt; queryCursor(Statement statement)</td>
<td>执行查询</td>
</tr>
<tr>
<td>Statement instantiateStatement(Connection connection)</td>
<td>实例化<code>Statement</code></td>
</tr>
<tr>
<td>void parameterize(Statement statement)</td>
<td>设置<code>SQL</code>参数，<code>Statement</code>没有参数不需设置</td>
</tr>
</tbody></table>
<h5 id="源码-7"><a href="#源码-7" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并使用不需要参数的普通 Statement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleStatementHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseStatementHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameter,</span></span><br><span class="line"><span class="params">            RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> mappedStatement.getKeyGenerator();</span><br><span class="line">        <span class="type">int</span> rows;</span><br><span class="line">        <span class="comment">// 根据主键生成策略获取主键</span></span><br><span class="line">        <span class="keyword">if</span> (keyGenerator <span class="keyword">instanceof</span> Jdbc3KeyGenerator) &#123;</span><br><span class="line">            statement.execute(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">            rows = statement.getUpdateCount();</span><br><span class="line">            keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyGenerator <span class="keyword">instanceof</span> SelectKeyGenerator) &#123;</span><br><span class="line">            statement.execute(sql);</span><br><span class="line">            rows = statement.getUpdateCount();</span><br><span class="line">            keyGenerator.processAfter(executor, mappedStatement, statement, parameterObject);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            statement.execute(sql);</span><br><span class="line">            rows = statement.getUpdateCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回更新的行数</span></span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 添加批量执行 SQL</span></span><br><span class="line">        statement.addBatch(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        statement.execute(sql);</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        <span class="keyword">return</span> resultSetHandler.handleResultSets(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        statement.execute(sql);</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        <span class="keyword">return</span> resultSetHandler.handleCursorResultSets(statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Statement <span class="title function_">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 根据 MappedStatement 的结果类型创建 Statement</span></span><br><span class="line">        <span class="keyword">if</span> (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.createStatement();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection.createStatement(mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="PreparedStatementHandler"><a href="#PreparedStatementHandler" class="headerlink" title="PreparedStatementHandler"></a>PreparedStatementHandler</h4><h5 id="作用-8"><a href="#作用-8" class="headerlink" title="作用"></a>作用</h5><p>使用<code>PreparedStatement</code>执行<code>SQL</code>的底层类，封装了所有<code>PreparedStatement</code>使用细节。</p>
<h5 id="方法-8"><a href="#方法-8" class="headerlink" title="方法"></a>方法</h5><p>实现了<code>PreparedStatement</code>操作数据库的具体方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>int update(Statement statement)</td>
<td>执行更新</td>
</tr>
<tr>
<td>void batch(Statement statement)</td>
<td>添加批量</td>
</tr>
<tr>
<td>&lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</td>
<td>执行查询</td>
</tr>
<tr>
<td>&lt;E&gt; Cursor&lt;E&gt; queryCursor(Statement statement)</td>
<td>执行查询</td>
</tr>
<tr>
<td>Statement instantiateStatement(Connection connection)</td>
<td>实例化<code>Statement</code></td>
</tr>
<tr>
<td>void parameterize(Statement statement)</td>
<td>设置<code>SQL</code>参数</td>
</tr>
</tbody></table>
<h5 id="源码-8"><a href="#源码-8" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并使用 PreparedStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PreparedStatementHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseStatementHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PreparedStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameter,</span></span><br><span class="line"><span class="params">            RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        ps.execute();</span><br><span class="line">        <span class="comment">// 获取更新的行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> ps.getUpdateCount();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> mappedStatement.getKeyGenerator();</span><br><span class="line">        <span class="comment">// 生成主键</span></span><br><span class="line">        keyGenerator.processAfter(executor, mappedStatement, ps, parameterObject);</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement) statement;</span><br><span class="line">        <span class="comment">// 添加批量</span></span><br><span class="line">        ps.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        ps.execute();</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        <span class="keyword">return</span> resultSetHandler.handleResultSets(ps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> (PreparedStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        ps.execute();</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        <span class="keyword">return</span> resultSetHandler.handleCursorResultSets(ps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Statement <span class="title function_">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 和 SimpleStatementHandler.update 相同，设置主键生成方式</span></span><br><span class="line">        <span class="keyword">if</span> (mappedStatement.getKeyGenerator() <span class="keyword">instanceof</span> Jdbc3KeyGenerator) &#123;</span><br><span class="line">            String[] keyColumnNames = mappedStatement.getKeyColumns();</span><br><span class="line">            <span class="keyword">if</span> (keyColumnNames == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> connection.prepareStatement(sql, keyColumnNames);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据 MappedStatement 的结果类型创建 PreparedStatement</span></span><br><span class="line">        <span class="keyword">if</span> (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.prepareStatement(sql);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.prepareStatement(sql, mappedStatement.getResultSetType().getValue(),</span><br><span class="line">                    ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        parameterHandler.setParameters((PreparedStatement) statement);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CallableStatementHandler"><a href="#CallableStatementHandler" class="headerlink" title="CallableStatementHandler"></a>CallableStatementHandler</h4><h5 id="作用-9"><a href="#作用-9" class="headerlink" title="作用"></a>作用</h5><p>使用<code>CallableStatement</code>执行<code>SQL</code>的底层类，封装了所有<code>CallableStatement</code>使用细节。</p>
<h5 id="方法-9"><a href="#方法-9" class="headerlink" title="方法"></a>方法</h5><p>实现了<code>CallableStatement</code>操作数据库的具体方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>int update(Statement statement)</td>
<td>执行更新</td>
</tr>
<tr>
<td>void batch(Statement statement)</td>
<td>添加批量</td>
</tr>
<tr>
<td>&lt;E&gt; List&lt;E&gt; query(Statement statement, ResultHandler resultHandler)</td>
<td>执行查询</td>
</tr>
<tr>
<td>&lt;E&gt; Cursor&lt;E&gt; queryCursor(Statement statement)</td>
<td>执行查询</td>
</tr>
<tr>
<td>Statement instantiateStatement(Connection connection)</td>
<td>实例化<code>Statement</code></td>
</tr>
<tr>
<td>void parameterize(Statement statement)</td>
<td>设置<code>SQL</code>参数</td>
</tr>
<tr>
<td>void registerOutputParameters(CallableStatement cs)</td>
<td>注册输出参数</td>
</tr>
</tbody></table>
<h5 id="源码-9"><a href="#源码-9" class="headerlink" title="源码"></a>源码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建并使用 CallableStatement</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableStatementHandler</span> <span class="keyword">extends</span> <span class="title class_">BaseStatementHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CallableStatementHandler</span><span class="params">(Executor executor, MappedStatement mappedStatement, Object parameter,</span></span><br><span class="line"><span class="params">            RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(executor, mappedStatement, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> (CallableStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        cs.execute();</span><br><span class="line">        <span class="comment">// 获取更新的行数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> cs.getUpdateCount();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parameterObject</span> <span class="operator">=</span> boundSql.getParameterObject();</span><br><span class="line">        <span class="type">KeyGenerator</span> <span class="variable">keyGenerator</span> <span class="operator">=</span> mappedStatement.getKeyGenerator();</span><br><span class="line">        <span class="comment">// 生成主键</span></span><br><span class="line">        keyGenerator.processAfter(executor, mappedStatement, cs, parameterObject);</span><br><span class="line">        <span class="comment">// 处理输出参数</span></span><br><span class="line">        resultSetHandler.handleOutputParameters(cs);</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batch</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> (CallableStatement) statement;</span><br><span class="line">        <span class="comment">// 添加批量</span></span><br><span class="line">        cs.addBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; List&lt;E&gt; <span class="title function_">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> (CallableStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        cs.execute();</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        List&lt;E&gt; resultList = resultSetHandler.handleResultSets(cs);</span><br><span class="line">        <span class="comment">// 处理输出参数</span></span><br><span class="line">        resultSetHandler.handleOutputParameters(cs);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; Cursor&lt;E&gt; <span class="title function_">queryCursor</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">CallableStatement</span> <span class="variable">cs</span> <span class="operator">=</span> (CallableStatement) statement;</span><br><span class="line">        <span class="comment">// 执行 SQL</span></span><br><span class="line">        cs.execute();</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">        Cursor&lt;E&gt; resultList = resultSetHandler.handleCursorResultSets(cs);</span><br><span class="line">        <span class="comment">// 处理输出参数</span></span><br><span class="line">        resultSetHandler.handleOutputParameters(cs);</span><br><span class="line">        <span class="keyword">return</span> resultList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Statement <span class="title function_">instantiateStatement</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> boundSql.getSql();</span><br><span class="line">        <span class="comment">// 根据 MappedStatement 的结果类型创建 PreparedStatement</span></span><br><span class="line">        <span class="keyword">if</span> (mappedStatement.getResultSetType() == ResultSetType.DEFAULT) &#123;</span><br><span class="line">            <span class="keyword">return</span> connection.prepareCall(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> connection.prepareCall(sql, mappedStatement.getResultSetType().getValue(), ResultSet.CONCUR_READ_ONLY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterize</span><span class="params">(Statement statement)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 注册输出参数</span></span><br><span class="line">        registerOutputParameters((CallableStatement) statement);</span><br><span class="line">        <span class="comment">// 设置参数</span></span><br><span class="line">        parameterHandler.setParameters((CallableStatement) statement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册输出参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cs CallableStatement</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerOutputParameters</span><span class="params">(CallableStatement cs)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, n = parameterMappings.size(); i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">ParameterMapping</span> <span class="variable">parameterMapping</span> <span class="operator">=</span> parameterMappings.get(i);</span><br><span class="line">            <span class="keyword">if</span> (parameterMapping.getMode() == ParameterMode.OUT || parameterMapping.getMode() == ParameterMode.INOUT) &#123;</span><br><span class="line">                <span class="comment">// 必须指定输出参数类型</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="literal">null</span> == parameterMapping.getJdbcType()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExecutorException</span>(</span><br><span class="line">                            <span class="string">&quot;The JDBC Type must be specified for output parameter.  Parameter: &quot;</span></span><br><span class="line">                                    + parameterMapping.getProperty());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (parameterMapping.getNumericScale() != <span class="literal">null</span> &amp;&amp; (parameterMapping.getJdbcType() == JdbcType.NUMERIC</span><br><span class="line">                        || parameterMapping.getJdbcType() == JdbcType.DECIMAL)) &#123;</span><br><span class="line">                    <span class="comment">// 注册数字类型输出参数</span></span><br><span class="line">                    cs.registerOutParameter(i + <span class="number">1</span>, parameterMapping.getJdbcType().TYPE_CODE,</span><br><span class="line">                            parameterMapping.getNumericScale());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 注册其他类型输出参数</span></span><br><span class="line">                    <span class="keyword">if</span> (parameterMapping.getJdbcTypeName() == <span class="literal">null</span>) &#123;</span><br><span class="line">                        cs.registerOutParameter(i + <span class="number">1</span>, parameterMapping.getJdbcType().TYPE_CODE);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cs.registerOutParameter(i + <span class="number">1</span>, parameterMapping.getJdbcType().TYPE_CODE,</span><br><span class="line">                                parameterMapping.getJdbcTypeName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mybatis.org/mybatis-3/zh_CN/java-api.html">mybatis – MyBatis 3 | Java API</a></li>
</ul>
]]></content>
      <categories>
        <category>读源码</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>ORM</tag>
      </tags>
  </entry>
</search>
