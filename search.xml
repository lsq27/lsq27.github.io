<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github-pages</title>
    <url>/2023/04/09/github-pages/</url>
    <content><![CDATA[<h1 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h1><h2 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">&gt; hexo init &lt;folder&gt;</span><br><span class="line">&gt; <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">&gt; npm install</span><br></pre></td></tr></table></figure>

<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br><span class="line"></span><br><span class="line"><span class="built_in">Mode</span>                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">d----         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>                  .github</span><br><span class="line">d----         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">33</span>                  node_modules</span><br><span class="line">d----         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>                  scaffolds</span><br><span class="line">d----         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>                  source</span><br><span class="line">d----         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>                  themes</span><br><span class="line">-a---         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>              <span class="number">0</span>   _config.landscape.yml</span><br><span class="line">-a---         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>           <span class="number">2546</span>   _config.yml</span><br><span class="line">-a---         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>             <span class="number">89</span>   .gitignore</span><br><span class="line">-a---         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">33</span>          <span class="number">93385</span>   package-lock.json</span><br><span class="line">-a---         <span class="number">2023</span>/<span class="number">3</span>/<span class="number">31</span>     <span class="number">15</span>:<span class="number">31</span>            <span class="number">641</span>   package.json</span><br></pre></td></tr></table></figure>

<p>Starts a local server. By default, this is at <a href="http://localhost:4000/">http://localhost:4000/</a>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-next</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>pacman</title>
    <url>/2023/04/08/pacman/</url>
    <content><![CDATA[<p>最近有在 Windows 下编译 C++的需要，不想使用笨重的 Visual Studio，于是采用 MingGW，考虑到可能的包管理器需求，选择 MSYS2。MSYS2 的包管理采用的是来自 Arch Linux 的<br>pacman。它将简单的二进制包格式与易于使用的构建系统相结合。pacman 的目标是让轻松管理软件包成为可能，无论它们是来自官方仓库还是用户自己的构建。</p>
<p>Pacman 只需一个命令即可更新系统上的所有软件包。这可能需要相当长的时间，具体取决于系统的最新程度。以下命令同步存储库数据库并更新系统的软件包，不包括不在已配置存储库中的“本地”软件包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Syu</span><br></pre></td></tr></table></figure>

<p>安装软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Ss string1 string2 ...</span><br></pre></td></tr></table></figure>

<p>要搜索已安装的软件包，请执行以下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Qs string1 string2 ...</span><br></pre></td></tr></table></figure>

<p>查看包的依赖关系树：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pactree package_name</span><br></pre></td></tr></table></figure>

<p>安装软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S package_name1 package_name2 ...</span><br></pre></td></tr></table></figure>

<p>安装不是来自远程仓库的“本地”软件包（例如，该软件包来自 AUR）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -U /path/to/package/package_name-version.pkg.tar.zst</span><br></pre></td></tr></table></figure>

<p>要删除单个包，保留其所有依赖项，请执行以下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -R package_name</span><br></pre></td></tr></table></figure>

<p>要删除任何其他已安装软件包不需要的软件包及其依赖项，请执行以下操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -Rs package_name</span><br></pre></td></tr></table></figure>

<p>paccache（8） 脚本， 在 pacman-contrib 软件包中提供， 默认情况下会删除所有已安装和卸载的软件包的缓存版本， 除了最近的三个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">paccache -r</span><br></pre></td></tr></table></figure>

<p>Pacman 通过与主服务器同步软件包列表来保持系统最新状态。此服务器&#x2F;客户端模型还允许用户使用简单的命令下载&#x2F;安装包，并完成所有必需的依赖项。</p>
<p>Pacman 是用 C 编程语言编写的， 使用 bsdtar（1） tar 格式进行打包。</p>
]]></content>
      <tags>
        <tag>包管理</tag>
        <tag>Linux</tag>
        <tag>Arch</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot SPI 机制探究</title>
    <url>/2023/04/01/spring-spi/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Boot 带给我们的一大便利是当需要引入一个第三方依赖时，如果其有 Starter，可以加入 Starter 依赖，就可以实现自动装配，这中便利就来自 Spring Boot 独特的 SPI 机制。</p>
<span id="more"></span>

<p>比如项目中希望引入 Mybatis，只需在 POM 中加入以下代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>剩下的工作就是定义 Mapper 并使用，中间所有繁杂的配置 Starter 都帮忙做了。如此神奇的功能其实实现原理十分简单，下文进行分析。</p>
<h2 id="获取配置类的全限定名"><a href="#获取配置类的全限定名" class="headerlink" title="获取配置类的全限定名"></a>获取配置类的全限定名</h2><p>从 <code>@SpringBootApplication</code> 注解一路向下寻找，依次找<code>@EnableAutoConfiguration</code>、<code>@Import(AutoConfigurationImportSelector.class)</code>、<code>getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes)</code>，可以看到熟悉的 <code>spring.factories</code>，此处调用的两个函数即为 Spring SPI 的扫描逻辑，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; configurations = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(</span><br><span class="line">		SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span><br><span class="line">ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span><br><span class="line">Assert.notEmpty(configurations,</span><br><span class="line">		<span class="string">&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span><br><span class="line">				+ <span class="string">&quot;are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="META-INF-spring-factories"><a href="#META-INF-spring-factories" class="headerlink" title="META-INF/spring.factories"></a><code>META-INF/spring.factories</code></h3><p>第一种方式是读取 classpath 中的所有 <code>META-INF/spring.factories</code> 文件，此处有三个循环，第一层遍历获取到的文件位置，第二层遍历文件中的属性，第三层遍历每个属性用 <code>,</code> 分割后的字符串（类路径），这样就获取到了所有需要进行装配的 Configuration 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;URL&gt; urls = classLoader.getResources(FACTORIES_RESOURCE_LOCATION);</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">	<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">	<span class="type">UrlResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlResource</span>(url);</span><br><span class="line">	<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> PropertiesLoaderUtils.loadProperties(resource);</span><br><span class="line">	<span class="keyword">for</span> (Map.Entry&lt;?, ?&gt; entry : properties.entrySet()) &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">factoryTypeName</span> <span class="operator">=</span> ((String) entry.getKey()).trim();</span><br><span class="line">		String[] factoryImplementationNames =</span><br><span class="line">				StringUtils.commaDelimitedListToStringArray((String) entry.getValue());</span><br><span class="line">		<span class="keyword">for</span> (String factoryImplementationName : factoryImplementationNames) &#123;</span><br><span class="line">			result.computeIfAbsent(factoryTypeName, key -&gt; <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;())</span><br><span class="line">					.add(factoryImplementationName.trim());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports"><a href="#META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports" class="headerlink" title="META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports"></a><code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code></h3><p>在 Spring Boot 2.7.0 中，增加了对另一种自动配置方式的支持，即读取资源文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件，第一层遍历获取到的文件位置，第二层遍历文件中的行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">location</span> <span class="operator">=</span> String.format(LOCATION, annotation.getName());</span><br><span class="line">Enumeration&lt;URL&gt; urls = findUrlsInClasspath(classLoaderToUse, location);</span><br><span class="line">List&lt;String&gt; importCandidates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">	<span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> urls.nextElement();</span><br><span class="line">	importCandidates.addAll(readCandidateConfigurations(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>得到类名后，Spring 利用 <code>Class.forName</code> 将所有需要进行装配的配置类进行加载实例化，不再赘述。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学习编码的过程中不能被像 SPI 看起来高深的概念所迷惑，看起来很神奇的自动装配功能其实归根到底就是读取特定名称的配置文件，然后反射获取配置类。</p>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>SPI</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>在 Windows 下愉快地使用 SSH</title>
    <url>/2023/04/01/ssh/</url>
    <content><![CDATA[<p>Windows 现在自带OpenSSH客户端，配合git进行使用</p>
<span id="more"></span>

<h2 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h2><p>使用 <code>Ed25519</code> 算法生成 SSH key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>确认生成路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\you/.ssh/id_ed25519):</span><br></pre></td></tr></table></figure>

<p>输入两次 passphrase，可以为空，为空时一旦有人获取私钥，则可以访问所有配置了该私钥的系统，不建议为空。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"></span><br><span class="line">Enter same passphrase again:</span><br><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519</span><br><span class="line"></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>

<p>生成后相应目录会产生两个文件，<code>.pub</code>后缀为公钥，另一个为私钥。</p>
<h2 id="使用-SSH-Key"><a href="#使用-SSH-Key" class="headerlink" title="使用 SSH Key"></a>使用 SSH Key</h2><p>使用方式以<code>GitHub</code>为例，进入<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，将公钥内容粘贴进<code>Key</code>框中，点击<code>Add SSH key</code>，</p>
<p>测试 github 认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;C:\Users\you/.ssh/id_ed25519&#x27;</span>:</span><br><span class="line"></span><br><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-ssh-agent"><a href="#配置-ssh-agent" class="headerlink" title="配置 ssh-agent"></a>配置 ssh-agent</h2><p>在做完以上步骤后， SHH Key 已经可以正常使用了，但是每次都要输入 passphrase，十分麻烦，可以利用 ssh-agent 对私钥解密结果进行缓存。</p>
<p>使用键盘输入 <code>Win</code> + <code>R</code>，输入<code>services.msc</code>进入服务。打开<code>OpenSSH Authentication Agent</code>项目，启动类型选择自动或自动(延迟启动)，点击启动。</p>
<p>添加 SSH key 到 ssh-agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-add</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> C:\Users\lusha/.ssh/id_ed25519:</span><br><span class="line"></span><br><span class="line">Identity added: C:\Users\you/.ssh/id_ed25519 (your_email@example.com)</span><br></pre></td></tr></table></figure>

<p>操作完成后，删除私钥文件。建议将私钥文件加密备份，以防操作系统重装等因素导致私钥丢失</p>
<h2 id="GPG"><a href="#GPG" class="headerlink" title="GPG"></a>GPG</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.29-unknown; Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg&#x27;</span> created</span><br><span class="line">gpg: keybox <span class="string">&#x27;/c/Users/lusha/.gnupg/pubring.kbx&#x27;</span> created</span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 1</span><br><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072) 4096</span><br><span class="line">Requested keysize is 4096 bits</span><br><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0)</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: lsq27</span><br><span class="line">Email address: lushaoqiang27@gmail.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;lsq27 &lt;lushaoqiang27@gmail.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /c/Users/lusha/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key 14F807AABAA53E8E marked as ultimately trusted</span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d&#x27;</span> created</span><br><span class="line">gpg: revocation certificate stored as <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d/99A618713B52EF6F70AE461A14F807AABAA53E8E.rev&#x27;</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2023-03-31 [SC]</span><br><span class="line">      99A618713B52EF6F70AE461A14F807AABAA53E8E</span><br><span class="line">uid                      lsq27 &lt;lushaoqiang27@gmail.com&gt;</span><br><span class="line">sub   rsa4096 2023-03-31 [E]</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>转载请注明出处，使用时须遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA 4.0 License</a> 中所述条款。</p>
</blockquote>
<h1 id="在-Windows-下愉快地使用-SSH"><a href="#在-Windows-下愉快地使用-SSH" class="headerlink" title="在 Windows 下愉快地使用 SSH"></a>在 Windows 下愉快地使用 SSH</h1><h2 id="生成-SSH-key-1"><a href="#生成-SSH-key-1" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h2><p>使用 <code>Ed25519</code> 算法生成 SSH key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-keygen -t ed25519 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>确认生成路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (C:\Users\you/.ssh/id_ed25519):</span><br></pre></td></tr></table></figure>

<p>输入两次 passphrase，可以为空，为空时一旦有人获取私钥，则可以访问所有配置了该私钥的系统，不建议为空。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line"></span><br><span class="line">Enter same passphrase again:</span><br><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519</span><br><span class="line"></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\you/.ssh/id_ed25519.pub</span><br></pre></td></tr></table></figure>

<p>生成后相应目录会产生两个文件，<code>.pub</code>后缀为公钥，另一个为私钥。</p>
<h2 id="使用-SSH-Key-1"><a href="#使用-SSH-Key-1" class="headerlink" title="使用 SSH Key"></a>使用 SSH Key</h2><p>使用方式以<code>GitHub</code>为例，进入<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>，将公钥内容粘贴进<code>Key</code>框中，点击<code>Add SSH key</code>，</p>
<p>测试 github 认证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;C:\Users\you/.ssh/id_ed25519&#x27;</span>:</span><br><span class="line"></span><br><span class="line">Hi xxx! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-ssh-agent-1"><a href="#配置-ssh-agent-1" class="headerlink" title="配置 ssh-agent"></a>配置 ssh-agent</h2><p>在做完以上步骤后， SHH Key 已经可以正常使用了，但是每次都要输入 passphrase，十分麻烦，可以利用 ssh-agent 对私钥解密结果进行缓存。</p>
<p>使用键盘输入 <code>Win</code> + <code>R</code>，输入<code>services.msc</code>进入服务。打开<code>OpenSSH Authentication Agent</code>项目，启动类型选择自动或自动(延迟启动)，点击启动。</p>
<p>添加 SSH key 到 ssh-agent</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ssh-add</span><br><span class="line"></span><br><span class="line">Enter passphrase <span class="keyword">for</span> C:\Users\lusha/.ssh/id_ed25519:</span><br><span class="line"></span><br><span class="line">Identity added: C:\Users\you/.ssh/id_ed25519 (your_email@example.com)</span><br></pre></td></tr></table></figure>

<p>操作完成后，删除私钥文件。建议将私钥文件加密备份，以防操作系统重装等因素导致私钥丢失</p>
<h2 id="GPG-1"><a href="#GPG-1" class="headerlink" title="GPG"></a>GPG</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gpg --full-generate-key</span><br><span class="line">gpg (GnuPG) 2.2.29-unknown; Copyright (C) 2021 Free Software Foundation, Inc.</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line"></span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg&#x27;</span> created</span><br><span class="line">gpg: keybox <span class="string">&#x27;/c/Users/lusha/.gnupg/pubring.kbx&#x27;</span> created</span><br><span class="line">Please select what kind of key you want:</span><br><span class="line">   (1) RSA and RSA (default)</span><br><span class="line">   (2) DSA and Elgamal</span><br><span class="line">   (3) DSA (sign only)</span><br><span class="line">   (4) RSA (sign only)</span><br><span class="line">  (14) Existing key from card</span><br><span class="line">Your selection? 1</span><br><span class="line">RSA keys may be between 1024 and 4096 bits long.</span><br><span class="line">What keysize <span class="keyword">do</span> you want? (3072) 4096</span><br><span class="line">Requested keysize is 4096 bits</span><br><span class="line">Please specify how long the key should be valid.</span><br><span class="line">         0 = key does not expire</span><br><span class="line">      &lt;n&gt;  = key expires <span class="keyword">in</span> n days</span><br><span class="line">      &lt;n&gt;w = key expires <span class="keyword">in</span> n weeks</span><br><span class="line">      &lt;n&gt;m = key expires <span class="keyword">in</span> n months</span><br><span class="line">      &lt;n&gt;y = key expires <span class="keyword">in</span> n years</span><br><span class="line">Key is valid <span class="keyword">for</span>? (0)</span><br><span class="line">Key does not expire at all</span><br><span class="line">Is this correct? (y/N) y</span><br><span class="line"></span><br><span class="line">GnuPG needs to construct a user ID to identify your key.</span><br><span class="line"></span><br><span class="line">Real name: lsq27</span><br><span class="line">Email address: lushaoqiang27@gmail.com</span><br><span class="line">Comment:</span><br><span class="line">You selected this USER-ID:</span><br><span class="line">    <span class="string">&quot;lsq27 &lt;lushaoqiang27@gmail.com&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">We need to generate a lot of random bytes. It is a good idea to perform</span><br><span class="line">some other action (<span class="built_in">type</span> on the keyboard, move the mouse, utilize the</span><br><span class="line">disks) during the prime generation; this gives the random number</span><br><span class="line">generator a better chance to gain enough entropy.</span><br><span class="line">gpg: /c/Users/lusha/.gnupg/trustdb.gpg: trustdb created</span><br><span class="line">gpg: key 14F807AABAA53E8E marked as ultimately trusted</span><br><span class="line">gpg: directory <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d&#x27;</span> created</span><br><span class="line">gpg: revocation certificate stored as <span class="string">&#x27;/c/Users/lusha/.gnupg/openpgp-revocs.d/99A618713B52EF6F70AE461A14F807AABAA53E8E.rev&#x27;</span></span><br><span class="line">public and secret key created and signed.</span><br><span class="line"></span><br><span class="line">pub   rsa4096 2023-03-31 [SC]</span><br><span class="line">      99A618713B52EF6F70AE461A14F807AABAA53E8E</span><br><span class="line">uid                      lsq27 &lt;lushaoqiang27@gmail.com&gt;</span><br><span class="line">sub   rsa4096 2023-03-31 [E]</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p>转载请注明出处，使用时须遵循 <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">CC BY-SA 4.0 License</a> 中所述条款。</p>
</blockquote>
]]></content>
      <categories>
        <category>配置</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>GPG</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>使用MSYS2</title>
    <url>/2023/04/08/use-msys2/</url>
    <content><![CDATA[<h2 id="MSYS2-是什么"><a href="#MSYS2-是什么" class="headerlink" title="MSYS2 是什么"></a>MSYS2 是什么</h2><p>来自官网的介绍</p>
<blockquote>
<p>MSYS2 是工具和库的集合，为您提供易于使用的环境，用于构建、安装和运行原生 Windows 软件。</p>
</blockquote>
<p>它由 <a href="https://mintty.github.io/">mintty</a> terminal，bash shell，和一些基于 <a href="https://cygwin.com/">Cygwin</a> 的工具组成。<br>MSYS2 可以为 Windows 提供最新的 GCC、mingw-w64、 CPython，CMake，Meson，OpenSSL，FFmpeg，Rust，Ruby 等软件最新的原生构建。</p>
<p>他的包管理工具是来自 Arch Linux 的 <a href="https://wiki.archlinux.org/index.php/pacman">Pacman</a>，现有约 2800 个软件。</p>
<h2 id="MSYS2-为什么要用-MSYS2"><a href="#MSYS2-为什么要用-MSYS2" class="headerlink" title="MSYS2 为什么要用 MSYS2"></a>MSYS2 为什么要用 MSYS2</h2><p>我最开始用 MSYS2 的目的很简单，需要在 Windows 下编译 C++，不喜欢 MSVC 的臃肿于是选择了 <a href="https://www.mingw-w64.org/">MinGW-w64</a>，MinGW-w64 的下载页中是 Windows 平台且提供的软件较多的两个安装包分别是 Cygwin 和 MSYS2。比较了一番他们的区别之后，我选择了提供原生 Windows 构建工具的 MSYS2。</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装-MSYS2"><a href="#安装-MSYS2" class="headerlink" title="安装 MSYS2"></a>安装 MSYS2</h3><p>使用 Scoop 、 Winget 或<a href="https://www.msys2.org/">官网</a>安装包</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install msys2</span><br><span class="line">&gt; winget install MSYS2.MSYS2</span><br></pre></td></tr></table></figure>

<h3 id="更新-MSYS2"><a href="#更新-MSYS2" class="headerlink" title="更新 MSYS2"></a>更新 MSYS2</h3><p>启动 UCRT64，更新包，执行 <code>pacman -Syuu</code> 多次直到提示无更新可用。</p>
<h3 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h3><p>搜索可用软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -Ss &lt;name_pattern&gt;</span><br></pre></td></tr></table></figure>

<h3 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h3><p>安装软件包或一组软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S &lt;package_names|package_groups&gt;</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>列出显示安装过的包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -Qe</span><br></pre></td></tr></table></figure>

<h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>卸载软件包或一组软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -R &lt;package_names|package_groups&gt;</span><br></pre></td></tr></table></figure>

<h2 id="开发配置"><a href="#开发配置" class="headerlink" title="开发配置"></a>开发配置</h2><h3 id="安装工具链"><a href="#安装工具链" class="headerlink" title="安装工具链"></a>安装工具链</h3><p>安装 MSYS2 最大的目的就是 GCC 工具链，其中有两个软件包组需要安装</p>
<ul>
<li><a href="https://packages.msys2.org/package/base-devel?repo=msys&variant=x86_64">base-devel</a> 包含 make，curl，grep 等开发常用的基础包</li>
<li><a href="https://packages.msys2.org/groups/mingw-w64-ucrt-x86_64-toolchain">mingw-w64-ucrt-x86_64-toolchain</a> 包含 GCC 工具链</li>
</ul>
<p>和 Linux 相似，<code>devel</code> 结尾的包，包含使用该程序进行开发的所有的必需文件，例如 libcurl-devel 中包含 Libcurl 的头文件和库文件</p>
<p><code>msys repo</code> 下的包会被安装到 <code>/usr</code> 目录下，<code>ucrt64 repo</code> 下的包会被安装到 <code>/ucrt64</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain</span><br></pre></td></tr></table></figure>

<h3 id="更换-shell"><a href="#更换-shell" class="headerlink" title="更换 shell"></a>更换 shell</h3><p>MSYS2 默认为 Bash，个人更喜欢 Fish。安装配置方式与 Linux 下相同</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pacman -S fish</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">path/to/msys2_shell.cmd -defterm -here -no-start -ucrt64 -shell fish</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：更换 shell 后如果还需运行 Bash 脚本，请在 Bash 脚本第一行添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pacman -S mingw-w64-ucrt-x86_64-oh-my-posh</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.config/fish/config.fish</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oh-my-posh init fish --config /ucrt64/share/oh-my-posh/themes/1_shell.omp.json | <span class="built_in">source</span></span><br></pre></td></tr></table></figure>

<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>MSYS2 带有不同的环境&#x2F;子系统，您拥有的第一件事 决定使用哪一个。环境之间的差异是 主要是环境变量、默认编译器&#x2F;链接器、架构、 使用的系统库等如果您不确定，请选择 UCRT64。</p>
<p>MSYS 环境包含基于 unix&#x2F;cygwin 的工具，存在于其下，并且特别之处在于它始终处于活动状态。所有其他环境 从 MSYS 环境继承并在其上添加各种内容。&#x2F;usr</p>
<p>例如，在 UCRT64 环境中，变量以 因此您可以获得所有基于 ucrt64 的工具以及所有 msys 工具。<code>$PATH=/ucrt64/bin:/usr/bin</code></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>package manager</tag>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>增强 Windows 开发体验</title>
    <url>/2023/04/09/use-powershell/</url>
    <content><![CDATA[<p>Windows 的终端相比于 Unix-Like 来说，一直处于弱势。微软注意到了这个问题，在尝试增强 Windows 下的开发体验。最近正好重装了笔记本的操作系统</p>
<p>一般来说，PowerShell 中用户创建的变量、函数等只能在当前的窗口会话生效。但配置文件非常特殊，PowerShell 每次启动前都会加载该文件。如果将某些命令写入这个文件，修改就能全局生效。新建或修改配置文件最简单的方法是输入 notepad $profile，在弹出的编辑窗口添加命令即可。</p>
<h2 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h2><p>个人喜欢的包管理工具是 <a href="https://scoop.sh/">Scoop</a>，主打便携功能当然 Chocolate 和 Winget 也是不错的选择。</p>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="Nerd-Fonts"><a href="#Nerd-Fonts" class="headerlink" title="Nerd Fonts"></a>Nerd Fonts</h3><p>安装 一款 <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a>，推荐 <code>Fira Code Nerd Font</code>，<code>Fira Code</code> 支持连字 <code>ligature</code>，<code>Nerd Fonts</code> 在原有字体的基础上增加了图标字符。</p>
<h3 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h3><p>安装最新版 <a href="https://www.microsoft.com/store/productId/9MZ1SNWT0N5D">PowerShell 7.3.3</a></p>
<h3 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h3><p>安装最新版 <a href="https://www.microsoft.com/store/productId/9N0DX20HK701">Windows Terminal 1.15</a></p>
<ul>
<li>将 <code>PowerShell</code> 设置为默认配置文件<br><img src="/img/1.png" alt="PowerShell"></li>
<li>将 <code>Fira Code NF</code> 设置为默认字体<br><img src="/img/2.png" alt="PowerShell"></li>
</ul>
<h2 id="PowerShell-1"><a href="#PowerShell-1" class="headerlink" title="PowerShell"></a>PowerShell</h2><p><a href="https://github.com/PowerShell/PSReadLine">PSReadLine</a></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-PredictionViewStyle</span> ListView</span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> Tab <span class="literal">-Function</span> MenuComplete</span><br><span class="line">scoop install scoop<span class="literal">-completion</span></span><br></pre></td></tr></table></figure>

<h2 id="利用别名缩短命令"><a href="#利用别名缩短命令" class="headerlink" title="利用别名缩短命令"></a>利用别名缩短命令</h2><p>获取别名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Get-Alias</span> name</span><br></pre></td></tr></table></figure>

<p>获取别名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Get-Alias</span> name</span><br></pre></td></tr></table></figure>

<p>设置别名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Set-Alias</span> alias command</span><br></pre></td></tr></table></figure>

<p>移除别名</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Remove-Alias</span> name</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>package manager</tag>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下最好的便携式包管理工具 - Scoop</title>
    <url>/2022/02/07/use-scoop/</url>
    <content><![CDATA[<h2 id="Scoop-是什么"><a href="#Scoop-是什么" class="headerlink" title="Scoop 是什么"></a>Scoop 是什么</h2><p><a href="https://scoop.sh/">Scoop</a>是一个 Windows 下的命令行安装器，可以用来解决应用及其依赖下载、安装、更新、卸载。其官网的自我介绍是</p>
<blockquote>
<p>Scoop 以阻力最小的方式从命令行安装您熟悉和喜爱的程序，它可以：</p>
<ul>
<li>消除权限弹出窗口</li>
<li>隐藏安装程序的界面</li>
<li>防止安装大量程序对 PATH 的污染</li>
<li>避免安装和卸载程序的意外副作用</li>
<li>查找并安装依赖项</li>
<li>执行所有额外的程序设置步骤</li>
</ul>
</blockquote>
<h2 id="为什么要用-Scoop"><a href="#为什么要用-Scoop" class="headerlink" title="为什么要用 Scoop"></a>为什么要用 Scoop</h2><p>相比于使用传统的安装包安装，控制面板卸载方式，像 Scoop 这样包管理软件的优势是统一应用管理入口，便于搜索应用，使用应用默认安装方式，统一应用安装路径。对于普通用户可能帮助不大，但是对于经常升级折腾的开发人员来说，一键安装升级卸载的诱惑不可谓不大:)</p>
<p>以前我要安装一个软件，我会</p>
<ul>
<li>搜索引擎搜索 node</li>
<li>打开官网 (注意避开广告！)</li>
<li>寻找适合版本的下载链接，使用下载工具下载</li>
<li>打开安装包配置我需要的参数并安装</li>
</ul>
<p>通过 Scoop 安装一个软件的，只需输入一个命令，Scoop 帮我们</p>
<ul>
<li>下载安装包(压缩包)</li>
<li>安装(解压)</li>
<li>链接安装目录</li>
<li>持久化文件</li>
<li>执行脚本</li>
</ul>
<p>Scoop 不只帮我们省略了找到安装包的过程，还免去了安装时的配置过程(Scoop 在安装脚本中写明了最佳的安装配置)，更妙的是全程都没用到管理员权限，自然也不必担心安装包对操作系统未知的修改(比如偷偷装个证书，设置自己为开机启动)。</p>
<p>和自行安装软件相比，我认为 Scoop 的优点有</p>
<ul>
<li>软件数量多，官方桶中包含约 4000 个软件，第三方桶也有丰富应用</li>
<li>安装不依赖管理员权限，除了极少数特殊软件需要修改注册表或者安装到管理员目录</li>
<li>自动配置，安装时采用默认配置，Scoop 默认把路径设置为自己的目录，开机自启动等设置为否，简化安装步骤</li>
<li>自动安装依赖</li>
<li>自动添加命令行程序的链接到 <code>~/scoop/shims</code>，然后再将该目录添加到环境变量，自动添加 GUI 程序的快捷方式到开始菜单</li>
<li>比 Linux 的包管理工具更便携的软件管理体验，即使重装系统也能快速恢复软件环境</li>
<li>路径可控，大部分文件都会存在于 <code>~/scoop</code>，升级时需要保留的文件存在于 <code>~/scoop/persist</code></li>
</ul>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装-Scoop"><a href="#安装-Scoop" class="headerlink" title="安装 Scoop"></a>安装 Scoop</h3><p>打开 PowerShell (版本号大于等于 5.1)，执行以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">Set-ExecutionPolicy</span> RemoteSigned <span class="literal">-Scope</span> CurrentUser <span class="comment"># 获取执行脚本权限</span></span><br><span class="line">&gt; <span class="built_in">irm</span> get.scoop.sh | <span class="built_in">iex</span></span><br><span class="line">&gt; <span class="built_in">irm</span> get.scoop.sh <span class="literal">-Proxy</span> <span class="string">&#x27;http://&lt;ip:port&gt;&#x27;</span> | <span class="built_in">iex</span> <span class="comment"># 使用代理连接 GitHub</span></span><br></pre></td></tr></table></figure>

<p>Scoop 会被安装到 <code>C:\Users\&lt;YOUR USERNAME&gt;\scoop</code> 目录下，如果想自定义安装目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">irm</span> get.scoop.sh <span class="literal">-outfile</span> <span class="string">&#x27;install.ps1&#x27;</span></span><br><span class="line">&gt; .\install.ps1 <span class="literal">-ScoopDir</span> <span class="string">&#x27;D:\Applications\Scoop&#x27;</span> <span class="literal">-ScoopGlobalDir</span> <span class="string">&#x27;F:\GlobalScoopApps&#x27;</span></span><br></pre></td></tr></table></figure>

<p>安装 nodejs-lts</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install nodejs<span class="literal">-lts</span></span><br><span class="line">&gt; node <span class="literal">-v</span></span><br></pre></td></tr></table></figure>

<p>安装 VS Code</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop bucket add extras</span><br><span class="line">&gt; scoop install vscode</span><br></pre></td></tr></table></figure>

<h2 id="管理软件"><a href="#管理软件" class="headerlink" title="管理软件"></a>管理软件</h2><h3 id="搜索软件"><a href="#搜索软件" class="headerlink" title="搜索软件"></a>搜索软件</h3><p>搜索可安装软件，列出所有符合条件的软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop search name</span><br></pre></td></tr></table></figure>

<h3 id="查看已安装软件"><a href="#查看已安装软件" class="headerlink" title="查看已安装软件"></a>查看已安装软件</h3><p>列出已安装软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop list</span><br></pre></td></tr></table></figure>

<h3 id="查看软件信息"><a href="#查看软件信息" class="headerlink" title="查看软件信息"></a>查看软件信息</h3><p>查看软件信息，如主页，描述，最后更新时间</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop info name</span><br></pre></td></tr></table></figure>

<h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><p>安装指定名称软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install name</span><br></pre></td></tr></table></figure>

<h3 id="打印安装路径"><a href="#打印安装路径" class="headerlink" title="打印安装路径"></a>打印安装路径</h3><p>打印指定软件路径</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop prefix name</span><br></pre></td></tr></table></figure>

<h3 id="更新软件"><a href="#更新软件" class="headerlink" title="更新软件"></a>更新软件</h3><p>更新指定软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop update name</span><br><span class="line">&gt; scoop update * <span class="comment"># 更新所有软件</span></span><br></pre></td></tr></table></figure>

<h3 id="锁定软件版本"><a href="#锁定软件版本" class="headerlink" title="锁定软件版本"></a>锁定软件版本</h3><p>锁定软件版本，不会被更新</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop hold name</span><br></pre></td></tr></table></figure>

<h3 id="解锁软件版本"><a href="#解锁软件版本" class="headerlink" title="解锁软件版本"></a>解锁软件版本</h3><p>解锁软件版本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop hold name</span><br></pre></td></tr></table></figure>

<h3 id="卸载软件"><a href="#卸载软件" class="headerlink" title="卸载软件"></a>卸载软件</h3><p>卸载指定软件，执行卸载脚本(删除环境变量等)</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop uninstall name</span><br></pre></td></tr></table></figure>

<h3 id="清理软件"><a href="#清理软件" class="headerlink" title="清理软件"></a>清理软件</h3><p>软件更新后旧版本并不会被卸载，执行命令进行清理</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop cleanup *</span><br></pre></td></tr></table></figure>

<h2 id="桶管理"><a href="#桶管理" class="headerlink" title="桶管理"></a>桶管理</h2><p>桶(bucket)保存着 Scoop 的可安装软件信息。安装完毕后只有一个桶 - main</p>
<h3 id="搜索桶"><a href="#搜索桶" class="headerlink" title="搜索桶"></a>搜索桶</h3><p>只能在 web 中搜索<a href="https://scoop.sh/#/buckets">可用桶</a></p>
<h3 id="列出官方认证的桶"><a href="#列出官方认证的桶" class="headerlink" title="列出官方认证的桶"></a>列出官方认证的桶</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop bucket known</span><br></pre></td></tr></table></figure>

<h3 id="列出已添加桶"><a href="#列出已添加桶" class="headerlink" title="列出已添加桶"></a>列出已添加桶</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop bucket list</span><br></pre></td></tr></table></figure>

<h3 id="添加桶"><a href="#添加桶" class="headerlink" title="添加桶"></a>添加桶</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop bucket add extras <span class="comment"># 含 GUI 的软件</span></span><br><span class="line">&gt; scoop bucket add versions <span class="comment"># 旧版软件</span></span><br><span class="line">&gt; scoop bucket add nerd<span class="literal">-fonts</span> <span class="comment"># 字体</span></span><br><span class="line">&gt; scoop bucket add nonportable <span class="comment"># 非便携软件</span></span><br><span class="line">&gt; scoop bucket add java <span class="comment"># 各种jdk</span></span><br><span class="line">&gt; scoop bucket add dorado https://github.com/chawyehsu/dorado <span class="comment"># 著名的的中文软件桶</span></span><br></pre></td></tr></table></figure>

<h3 id="删除桶"><a href="#删除桶" class="headerlink" title="删除桶"></a>删除桶</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop bucket <span class="built_in">rm</span> name</span><br></pre></td></tr></table></figure>

<h2 id="进阶用法"><a href="#进阶用法" class="headerlink" title="进阶用法"></a>进阶用法</h2><h3 id="优化搜索速度"><a href="#优化搜索速度" class="headerlink" title="优化搜索速度"></a>优化搜索速度</h3><p>scoop 的 search 命令会搜索远程服务器，而 <a href="https://github.com/shilangyu/scoop-search">scoop-search</a> 只搜索本地桶内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install scoop<span class="literal">-search</span></span><br><span class="line">&gt; scoop<span class="literal">-search</span> name</span><br></pre></td></tr></table></figure>

<h3 id="软件重名"><a href="#软件重名" class="headerlink" title="软件重名"></a>软件重名</h3><p>如果软件重名，使用如下方式安装，否则会安装查到的第一个软件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install bucket/name</span><br></pre></td></tr></table></figure>

<h3 id="指定软件版本"><a href="#指定软件版本" class="headerlink" title="指定软件版本"></a>指定软件版本</h3><p>如果要安装旧版软件且 versions 中没有，使用如下方式安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop install name@version</span><br></pre></td></tr></table></figure>

<p>一个该软件的 manifest 将会被生成在 <code>~\scoop\workspace</code>，该软件将不会被更新</p>
<h3 id="多版本软件优先级"><a href="#多版本软件优先级" class="headerlink" title="多版本软件优先级"></a>多版本软件优先级</h3><p>如果你安装了一个软件的多个衍生版本，例如 temurin-lts-jdk 和 temurin8-jdk，最后一个安装的版本将会在命令行生效，如果需要在命令行使用其他版本，执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">&gt; scoop reset name</span><br></pre></td></tr></table></figure>

<h2 id="编写自己的-manifest"><a href="#编写自己的-manifest" class="headerlink" title="编写自己的 manifest"></a>编写自己的 manifest</h2><p>以 <a href="https://github.com/vzhd1701/gridplayer">gridplayer</a> 为例，在其主页上找到 Windows 版本的安装包，便携版本优先。</p>
<p>在命令行输入以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">scoop create https://github.com/vzhd1701/gridplayer/releases/download/v0.<span class="number">4.3</span>/GridPlayer<span class="literal">-0</span>.<span class="number">4.3</span><span class="literal">-win64-portable</span>.zip</span><br></pre></td></tr></table></figure>

<p>依次选择 <code>App name</code> 和 <code>Version</code>，当前目录下将会生成 <code>gridplayer.json</code> 文件，其内容为</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vzhd1701/gridplayer/releases/download/v0.4.3/GridPlayer-0.4.3-win64-portable.zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;v0.4.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;depends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看出，生成的内容并不是很完善，需要手动补充完善。</p>
<p>最终 manifest 如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.4.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Play videos side-by-side&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vzhd1701/gridplayer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GPL-3.0-only&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vzhd1701/gridplayer/releases/download/v0.4.3/GridPlayer-0.4.3-win64-portable.zip&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1a233cb642cdeb3170c098651bfdc3ec9017d390b9991b53b1a9f03c5aca6d39&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;extract_dir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;GridPlayer&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shortcuts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">[</span><span class="string">&quot;GridPlayer.exe&quot;</span><span class="punctuation">,</span> <span class="string">&quot;GridPlayer&quot;</span><span class="punctuation">]</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;persist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;portable_data&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;checkver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;autoupdate&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;architecture&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;64bit&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vzhd1701/gridplayer/releases/download/v$version/GridPlayer-$version-win64-portable.zip&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$baseurl/checksums.sha256&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Windows</tag>
        <tag>package manager</tag>
        <tag>Scoop</tag>
        <tag>PowerShell</tag>
      </tags>
  </entry>
  <entry>
    <title>重装系统后恢复Scoop</title>
    <url>/2023/04/09/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E6%81%A2%E5%A4%8DScoop/</url>
    <content><![CDATA[<p>近期重装了系统，之前 scoop 使用安装的软件不想花时间重装，搜索到以下答案：</p>
<ul>
<li><a href="https://github.com/ScoopInstaller/Scoop/issues/2894#issuecomment-447276027">How to use scoop after reinstalling the system</a></li>
<li><a href="https://jiayaoo3o.github.io/2019/03/19/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E5%90%8E%E5%A6%82%E4%BD%95%E6%81%A2%E5%A4%8D%E4%BD%BF%E7%94%A8scoop/">重装系统后如何恢复使用 scoop</a></li>
</ul>
<p>一顿操作完成后，可以正常使用软件，但是在更新时会报如下错误，原因是 git 默认拒绝解析非当前用户拥有的存储库的配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fatal: detected dubious ownership in repository</span><br></pre></td></tr></table></figure>

<p>一个解决办法是执行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory path/to/error/directory</span><br></pre></td></tr></table></figure>

<p>如果 bucket 文件夹较多，可以执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global --add safe.directory *</span><br></pre></td></tr></table></figure>

<p>该方法有一定的安全风险，另一种从根源解决的方法为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更改scoop文件夹所有者为当前用户，并勾选应用到所有的子目录和文件</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
